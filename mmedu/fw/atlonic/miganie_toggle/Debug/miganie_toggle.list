
miganie_toggle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e28  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08000fbc  08000fbc  00010fbc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000fec  08000fec  00010fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000ff0  08000ff0  00010ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08000ff4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          00000020  2000000c  2000000c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000002c  2000002c  0002000c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00008880  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000148f  00000000  00000000  000288bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000012ee  00000000  00000000  00029d4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000348  00000000  00000000  0002b040  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000550  00000000  00000000  0002b388  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000216d  00000000  00000000  0002b8d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000018cb  00000000  00000000  0002da45  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0002f310  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000006cc  00000000  00000000  0002f38c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000fa4 	.word	0x08000fa4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08000fa4 	.word	0x08000fa4

080001d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001d4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001d6:	4a0e      	ldr	r2, [pc, #56]	; (8000210 <HAL_InitTick+0x3c>)
 80001d8:	4b0e      	ldr	r3, [pc, #56]	; (8000214 <HAL_InitTick+0x40>)
{
 80001da:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001dc:	7818      	ldrb	r0, [r3, #0]
 80001de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001e2:	fbb3 f3f0 	udiv	r3, r3, r0
 80001e6:	6810      	ldr	r0, [r2, #0]
 80001e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80001ec:	f000 f894 	bl	8000318 <HAL_SYSTICK_Config>
 80001f0:	4604      	mov	r4, r0
 80001f2:	b958      	cbnz	r0, 800020c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001f4:	2d0f      	cmp	r5, #15
 80001f6:	d809      	bhi.n	800020c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001f8:	4602      	mov	r2, r0
 80001fa:	4629      	mov	r1, r5
 80001fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000200:	f000 f856 	bl	80002b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000204:	4b04      	ldr	r3, [pc, #16]	; (8000218 <HAL_InitTick+0x44>)
 8000206:	4620      	mov	r0, r4
 8000208:	601d      	str	r5, [r3, #0]
 800020a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800020c:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 800020e:	bd38      	pop	{r3, r4, r5, pc}
 8000210:	20000008 	.word	0x20000008
 8000214:	20000000 	.word	0x20000000
 8000218:	20000004 	.word	0x20000004

0800021c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800021c:	4a07      	ldr	r2, [pc, #28]	; (800023c <HAL_Init+0x20>)
{
 800021e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000220:	6813      	ldr	r3, [r2, #0]
 8000222:	f043 0310 	orr.w	r3, r3, #16
 8000226:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000228:	2003      	movs	r0, #3
 800022a:	f000 f82f 	bl	800028c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800022e:	2000      	movs	r0, #0
 8000230:	f7ff ffd0 	bl	80001d4 <HAL_InitTick>
  HAL_MspInit();
 8000234:	f000 fde6 	bl	8000e04 <HAL_MspInit>
}
 8000238:	2000      	movs	r0, #0
 800023a:	bd08      	pop	{r3, pc}
 800023c:	40022000 	.word	0x40022000

08000240 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000240:	4a03      	ldr	r2, [pc, #12]	; (8000250 <HAL_IncTick+0x10>)
 8000242:	4b04      	ldr	r3, [pc, #16]	; (8000254 <HAL_IncTick+0x14>)
 8000244:	6811      	ldr	r1, [r2, #0]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	440b      	add	r3, r1
 800024a:	6013      	str	r3, [r2, #0]
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	20000028 	.word	0x20000028
 8000254:	20000000 	.word	0x20000000

08000258 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000258:	4b01      	ldr	r3, [pc, #4]	; (8000260 <HAL_GetTick+0x8>)
 800025a:	6818      	ldr	r0, [r3, #0]
}
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	20000028 	.word	0x20000028

08000264 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000264:	b538      	push	{r3, r4, r5, lr}
 8000266:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000268:	f7ff fff6 	bl	8000258 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800026c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800026e:	bf1c      	itt	ne
 8000270:	4b05      	ldrne	r3, [pc, #20]	; (8000288 <HAL_Delay+0x24>)
 8000272:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000274:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000276:	bf18      	it	ne
 8000278:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800027a:	f7ff ffed 	bl	8000258 <HAL_GetTick>
 800027e:	1b40      	subs	r0, r0, r5
 8000280:	4284      	cmp	r4, r0
 8000282:	d8fa      	bhi.n	800027a <HAL_Delay+0x16>
  {
  }
}
 8000284:	bd38      	pop	{r3, r4, r5, pc}
 8000286:	bf00      	nop
 8000288:	20000000 	.word	0x20000000

0800028c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800028c:	4a07      	ldr	r2, [pc, #28]	; (80002ac <HAL_NVIC_SetPriorityGrouping+0x20>)
 800028e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000290:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000294:	041b      	lsls	r3, r3, #16
 8000296:	0c1b      	lsrs	r3, r3, #16
 8000298:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800029c:	0200      	lsls	r0, r0, #8
 800029e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002a2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80002a6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80002a8:	60d3      	str	r3, [r2, #12]
 80002aa:	4770      	bx	lr
 80002ac:	e000ed00 	.word	0xe000ed00

080002b0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002b0:	4b17      	ldr	r3, [pc, #92]	; (8000310 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002b2:	b530      	push	{r4, r5, lr}
 80002b4:	68dc      	ldr	r4, [r3, #12]
 80002b6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002ba:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002be:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002c0:	2b04      	cmp	r3, #4
 80002c2:	bf28      	it	cs
 80002c4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002c6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002c8:	f04f 0501 	mov.w	r5, #1
 80002cc:	fa05 f303 	lsl.w	r3, r5, r3
 80002d0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002d4:	bf8c      	ite	hi
 80002d6:	3c03      	subhi	r4, #3
 80002d8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002da:	4019      	ands	r1, r3
 80002dc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002de:	fa05 f404 	lsl.w	r4, r5, r4
 80002e2:	3c01      	subs	r4, #1
 80002e4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80002e6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002e8:	ea42 0201 	orr.w	r2, r2, r1
 80002ec:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f0:	bfaf      	iteee	ge
 80002f2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f6:	f000 000f 	andlt.w	r0, r0, #15
 80002fa:	4b06      	ldrlt	r3, [pc, #24]	; (8000314 <HAL_NVIC_SetPriority+0x64>)
 80002fc:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fe:	bfa5      	ittet	ge
 8000300:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000304:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000306:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000308:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800030c:	bd30      	pop	{r4, r5, pc}
 800030e:	bf00      	nop
 8000310:	e000ed00 	.word	0xe000ed00
 8000314:	e000ed14 	.word	0xe000ed14

08000318 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000318:	3801      	subs	r0, #1
 800031a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800031e:	d20a      	bcs.n	8000336 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000322:	4a07      	ldr	r2, [pc, #28]	; (8000340 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000324:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000326:	21f0      	movs	r1, #240	; 0xf0
 8000328:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800032c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800032e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000330:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000332:	601a      	str	r2, [r3, #0]
 8000334:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000336:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	e000e010 	.word	0xe000e010
 8000340:	e000ed00 	.word	0xe000ed00

08000344 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000344:	4b04      	ldr	r3, [pc, #16]	; (8000358 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000346:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000348:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800034a:	bf0c      	ite	eq
 800034c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000350:	f022 0204 	bicne.w	r2, r2, #4
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	4770      	bx	lr
 8000358:	e000e010 	.word	0xe000e010

0800035c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800035c:	4770      	bx	lr

0800035e <HAL_SYSTICK_IRQHandler>:
{
 800035e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000360:	f7ff fffc 	bl	800035c <HAL_SYSTICK_Callback>
 8000364:	bd08      	pop	{r3, pc}
	...

08000368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000368:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800036c:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000370:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8000504 <HAL_GPIO_Init+0x19c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000374:	4a61      	ldr	r2, [pc, #388]	; (80004fc <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00U;
 8000376:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000378:	fa38 f403 	lsrs.w	r4, r8, r3
 800037c:	d102      	bne.n	8000384 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 800037e:	b003      	add	sp, #12
 8000380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000384:	f04f 0e01 	mov.w	lr, #1
 8000388:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 800038c:	ea18 060e 	ands.w	r6, r8, lr
 8000390:	f000 80a6 	beq.w	80004e0 <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000394:	684c      	ldr	r4, [r1, #4]
 8000396:	f024 0710 	bic.w	r7, r4, #16
 800039a:	2f02      	cmp	r7, #2
 800039c:	d116      	bne.n	80003cc <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 800039e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80003a2:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80003a6:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80003aa:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80003ae:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80003b2:	f04f 0c0f 	mov.w	ip, #15
 80003b6:	fa0c fc0b 	lsl.w	ip, ip, fp
 80003ba:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80003be:	690d      	ldr	r5, [r1, #16]
 80003c0:	fa05 f50b 	lsl.w	r5, r5, fp
 80003c4:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 80003c8:	f8ca 5020 	str.w	r5, [sl, #32]
 80003cc:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003d0:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80003d2:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003d6:	fa05 f50a 	lsl.w	r5, r5, sl
 80003da:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003dc:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003e0:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003e4:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003e8:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003ea:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003ee:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80003f0:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003f4:	d811      	bhi.n	800041a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80003f6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003f8:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80003fc:	68cf      	ldr	r7, [r1, #12]
 80003fe:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000402:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000406:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000408:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800040a:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800040e:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000412:	409f      	lsls	r7, r3
 8000414:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000418:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800041a:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800041c:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800041e:	688f      	ldr	r7, [r1, #8]
 8000420:	fa07 f70a 	lsl.w	r7, r7, sl
 8000424:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000426:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000428:	00e5      	lsls	r5, r4, #3
 800042a:	d559      	bpl.n	80004e0 <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800042c:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000430:	f045 0501 	orr.w	r5, r5, #1
 8000434:	f8c9 5018 	str.w	r5, [r9, #24]
 8000438:	f8d9 5018 	ldr.w	r5, [r9, #24]
 800043c:	f023 0703 	bic.w	r7, r3, #3
 8000440:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000444:	f005 0501 	and.w	r5, r5, #1
 8000448:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800044c:	9501      	str	r5, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800044e:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000452:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000454:	68bd      	ldr	r5, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000456:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800045a:	f04f 0e0f 	mov.w	lr, #15
 800045e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000462:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000466:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800046a:	d03b      	beq.n	80004e4 <HAL_GPIO_Init+0x17c>
 800046c:	4d24      	ldr	r5, [pc, #144]	; (8000500 <HAL_GPIO_Init+0x198>)
 800046e:	42a8      	cmp	r0, r5
 8000470:	d03a      	beq.n	80004e8 <HAL_GPIO_Init+0x180>
 8000472:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000476:	42a8      	cmp	r0, r5
 8000478:	d038      	beq.n	80004ec <HAL_GPIO_Init+0x184>
 800047a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800047e:	42a8      	cmp	r0, r5
 8000480:	d036      	beq.n	80004f0 <HAL_GPIO_Init+0x188>
 8000482:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000486:	42a8      	cmp	r0, r5
 8000488:	d034      	beq.n	80004f4 <HAL_GPIO_Init+0x18c>
 800048a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800048e:	42a8      	cmp	r0, r5
 8000490:	d032      	beq.n	80004f8 <HAL_GPIO_Init+0x190>
 8000492:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000496:	42a8      	cmp	r0, r5
 8000498:	bf14      	ite	ne
 800049a:	2507      	movne	r5, #7
 800049c:	2506      	moveq	r5, #6
 800049e:	fa05 f50c 	lsl.w	r5, r5, ip
 80004a2:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80004a6:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80004a8:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80004aa:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80004ac:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80004b0:	bf0c      	ite	eq
 80004b2:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80004b4:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 80004b6:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80004b8:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80004ba:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80004be:	bf0c      	ite	eq
 80004c0:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80004c2:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 80004c4:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80004c6:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004c8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80004cc:	bf0c      	ite	eq
 80004ce:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80004d0:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 80004d2:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80004d4:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004d6:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80004d8:	bf54      	ite	pl
 80004da:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80004dc:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 80004de:	60d5      	str	r5, [r2, #12]
    position++;
 80004e0:	3301      	adds	r3, #1
 80004e2:	e749      	b.n	8000378 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80004e4:	2500      	movs	r5, #0
 80004e6:	e7da      	b.n	800049e <HAL_GPIO_Init+0x136>
 80004e8:	2501      	movs	r5, #1
 80004ea:	e7d8      	b.n	800049e <HAL_GPIO_Init+0x136>
 80004ec:	2502      	movs	r5, #2
 80004ee:	e7d6      	b.n	800049e <HAL_GPIO_Init+0x136>
 80004f0:	2503      	movs	r5, #3
 80004f2:	e7d4      	b.n	800049e <HAL_GPIO_Init+0x136>
 80004f4:	2504      	movs	r5, #4
 80004f6:	e7d2      	b.n	800049e <HAL_GPIO_Init+0x136>
 80004f8:	2505      	movs	r5, #5
 80004fa:	e7d0      	b.n	800049e <HAL_GPIO_Init+0x136>
 80004fc:	40010400 	.word	0x40010400
 8000500:	48000400 	.word	0x48000400
 8000504:	40021000 	.word	0x40021000

08000508 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000508:	b10a      	cbz	r2, 800050e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800050a:	6181      	str	r1, [r0, #24]
 800050c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800050e:	6281      	str	r1, [r0, #40]	; 0x28
 8000510:	4770      	bx	lr

08000512 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000512:	6943      	ldr	r3, [r0, #20]
 8000514:	4059      	eors	r1, r3
 8000516:	6141      	str	r1, [r0, #20]
 8000518:	4770      	bx	lr
	...

0800051c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800051c:	6803      	ldr	r3, [r0, #0]
{
 800051e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000522:	07df      	lsls	r7, r3, #31
{
 8000524:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000526:	d411      	bmi.n	800054c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000528:	682b      	ldr	r3, [r5, #0]
 800052a:	079e      	lsls	r6, r3, #30
 800052c:	f100 808b 	bmi.w	8000646 <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000530:	682b      	ldr	r3, [r5, #0]
 8000532:	071c      	lsls	r4, r3, #28
 8000534:	f100 80fe 	bmi.w	8000734 <HAL_RCC_OscConfig+0x218>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000538:	682b      	ldr	r3, [r5, #0]
 800053a:	0758      	lsls	r0, r3, #29
 800053c:	f100 8147 	bmi.w	80007ce <HAL_RCC_OscConfig+0x2b2>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000540:	69aa      	ldr	r2, [r5, #24]
 8000542:	2a00      	cmp	r2, #0
 8000544:	f040 81dd 	bne.w	8000902 <HAL_RCC_OscConfig+0x3e6>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000548:	2000      	movs	r0, #0
 800054a:	e024      	b.n	8000596 <HAL_RCC_OscConfig+0x7a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800054c:	4cbd      	ldr	r4, [pc, #756]	; (8000844 <HAL_RCC_OscConfig+0x328>)
 800054e:	6863      	ldr	r3, [r4, #4]
 8000550:	f003 030c 	and.w	r3, r3, #12
 8000554:	2b04      	cmp	r3, #4
 8000556:	d00a      	beq.n	800056e <HAL_RCC_OscConfig+0x52>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000558:	6863      	ldr	r3, [r4, #4]
 800055a:	f003 030c 	and.w	r3, r3, #12
 800055e:	2b08      	cmp	r3, #8
 8000560:	d11c      	bne.n	800059c <HAL_RCC_OscConfig+0x80>
 8000562:	6863      	ldr	r3, [r4, #4]
 8000564:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800056c:	d116      	bne.n	800059c <HAL_RCC_OscConfig+0x80>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800056e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000572:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000576:	6821      	ldr	r1, [r4, #0]
 8000578:	fa93 f3a3 	rbit	r3, r3
 800057c:	fab3 f383 	clz	r3, r3
 8000580:	f003 031f 	and.w	r3, r3, #31
 8000584:	2201      	movs	r2, #1
 8000586:	fa02 f303 	lsl.w	r3, r2, r3
 800058a:	420b      	tst	r3, r1
 800058c:	d0cc      	beq.n	8000528 <HAL_RCC_OscConfig+0xc>
 800058e:	686b      	ldr	r3, [r5, #4]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d1c9      	bne.n	8000528 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000594:	2001      	movs	r0, #1
}
 8000596:	b002      	add	sp, #8
 8000598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800059c:	686b      	ldr	r3, [r5, #4]
 800059e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005a2:	d11e      	bne.n	80005e2 <HAL_RCC_OscConfig+0xc6>
 80005a4:	6823      	ldr	r3, [r4, #0]
 80005a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005aa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005ac:	f7ff fe54 	bl	8000258 <HAL_GetTick>
 80005b0:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80005b4:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005b6:	2701      	movs	r7, #1
 80005b8:	fa96 f3a6 	rbit	r3, r6
 80005bc:	6822      	ldr	r2, [r4, #0]
 80005be:	fa96 f3a6 	rbit	r3, r6
 80005c2:	fab3 f383 	clz	r3, r3
 80005c6:	f003 031f 	and.w	r3, r3, #31
 80005ca:	fa07 f303 	lsl.w	r3, r7, r3
 80005ce:	4213      	tst	r3, r2
 80005d0:	d1aa      	bne.n	8000528 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005d2:	f7ff fe41 	bl	8000258 <HAL_GetTick>
 80005d6:	eba0 0008 	sub.w	r0, r0, r8
 80005da:	2864      	cmp	r0, #100	; 0x64
 80005dc:	d9ec      	bls.n	80005b8 <HAL_RCC_OscConfig+0x9c>
            return HAL_TIMEOUT;
 80005de:	2003      	movs	r0, #3
 80005e0:	e7d9      	b.n	8000596 <HAL_RCC_OscConfig+0x7a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005e2:	bb0b      	cbnz	r3, 8000628 <HAL_RCC_OscConfig+0x10c>
 80005e4:	6823      	ldr	r3, [r4, #0]
 80005e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005ea:	6023      	str	r3, [r4, #0]
 80005ec:	6823      	ldr	r3, [r4, #0]
 80005ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005f2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005f4:	f7ff fe30 	bl	8000258 <HAL_GetTick>
 80005f8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80005fc:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005fe:	2701      	movs	r7, #1
 8000600:	fa96 f3a6 	rbit	r3, r6
 8000604:	6822      	ldr	r2, [r4, #0]
 8000606:	fa96 f3a6 	rbit	r3, r6
 800060a:	fab3 f383 	clz	r3, r3
 800060e:	f003 031f 	and.w	r3, r3, #31
 8000612:	fa07 f303 	lsl.w	r3, r7, r3
 8000616:	4213      	tst	r3, r2
 8000618:	d086      	beq.n	8000528 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800061a:	f7ff fe1d 	bl	8000258 <HAL_GetTick>
 800061e:	eba0 0008 	sub.w	r0, r0, r8
 8000622:	2864      	cmp	r0, #100	; 0x64
 8000624:	d9ec      	bls.n	8000600 <HAL_RCC_OscConfig+0xe4>
 8000626:	e7da      	b.n	80005de <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000628:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800062c:	6823      	ldr	r3, [r4, #0]
 800062e:	d103      	bne.n	8000638 <HAL_RCC_OscConfig+0x11c>
 8000630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000634:	6023      	str	r3, [r4, #0]
 8000636:	e7b5      	b.n	80005a4 <HAL_RCC_OscConfig+0x88>
 8000638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800063c:	6023      	str	r3, [r4, #0]
 800063e:	6823      	ldr	r3, [r4, #0]
 8000640:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000644:	e7b1      	b.n	80005aa <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000646:	4c7f      	ldr	r4, [pc, #508]	; (8000844 <HAL_RCC_OscConfig+0x328>)
 8000648:	6863      	ldr	r3, [r4, #4]
 800064a:	f013 0f0c 	tst.w	r3, #12
 800064e:	d00a      	beq.n	8000666 <HAL_RCC_OscConfig+0x14a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000650:	6863      	ldr	r3, [r4, #4]
 8000652:	f003 030c 	and.w	r3, r3, #12
 8000656:	2b08      	cmp	r3, #8
 8000658:	d124      	bne.n	80006a4 <HAL_RCC_OscConfig+0x188>
 800065a:	6863      	ldr	r3, [r4, #4]
 800065c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000660:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000664:	d11e      	bne.n	80006a4 <HAL_RCC_OscConfig+0x188>
 8000666:	2302      	movs	r3, #2
 8000668:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800066c:	6821      	ldr	r1, [r4, #0]
 800066e:	fa93 f3a3 	rbit	r3, r3
 8000672:	fab3 f383 	clz	r3, r3
 8000676:	f003 031f 	and.w	r3, r3, #31
 800067a:	2201      	movs	r2, #1
 800067c:	fa02 f303 	lsl.w	r3, r2, r3
 8000680:	420b      	tst	r3, r1
 8000682:	d002      	beq.n	800068a <HAL_RCC_OscConfig+0x16e>
 8000684:	68eb      	ldr	r3, [r5, #12]
 8000686:	4293      	cmp	r3, r2
 8000688:	d184      	bne.n	8000594 <HAL_RCC_OscConfig+0x78>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800068a:	6821      	ldr	r1, [r4, #0]
 800068c:	23f8      	movs	r3, #248	; 0xf8
 800068e:	fa93 f3a3 	rbit	r3, r3
 8000692:	fab3 f283 	clz	r2, r3
 8000696:	692b      	ldr	r3, [r5, #16]
 8000698:	4093      	lsls	r3, r2
 800069a:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 800069e:	4313      	orrs	r3, r2
 80006a0:	6023      	str	r3, [r4, #0]
 80006a2:	e745      	b.n	8000530 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80006a4:	68ea      	ldr	r2, [r5, #12]
 80006a6:	2601      	movs	r6, #1
 80006a8:	b30a      	cbz	r2, 80006ee <HAL_RCC_OscConfig+0x1d2>
 80006aa:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 80006ae:	fab3 f383 	clz	r3, r3
 80006b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80006b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	2702      	movs	r7, #2
 80006be:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80006c0:	f7ff fdca 	bl	8000258 <HAL_GetTick>
 80006c4:	4680      	mov	r8, r0
 80006c6:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006ca:	6822      	ldr	r2, [r4, #0]
 80006cc:	fa97 f3a7 	rbit	r3, r7
 80006d0:	fab3 f383 	clz	r3, r3
 80006d4:	f003 031f 	and.w	r3, r3, #31
 80006d8:	fa06 f303 	lsl.w	r3, r6, r3
 80006dc:	4213      	tst	r3, r2
 80006de:	d1d4      	bne.n	800068a <HAL_RCC_OscConfig+0x16e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006e0:	f7ff fdba 	bl	8000258 <HAL_GetTick>
 80006e4:	eba0 0008 	sub.w	r0, r0, r8
 80006e8:	2802      	cmp	r0, #2
 80006ea:	d9ec      	bls.n	80006c6 <HAL_RCC_OscConfig+0x1aa>
 80006ec:	e777      	b.n	80005de <HAL_RCC_OscConfig+0xc2>
 80006ee:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 80006f2:	fab3 f383 	clz	r3, r3
 80006f6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80006fa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	2702      	movs	r7, #2
 8000702:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000704:	f7ff fda8 	bl	8000258 <HAL_GetTick>
 8000708:	4680      	mov	r8, r0
 800070a:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800070e:	6822      	ldr	r2, [r4, #0]
 8000710:	fa97 f3a7 	rbit	r3, r7
 8000714:	fab3 f383 	clz	r3, r3
 8000718:	f003 031f 	and.w	r3, r3, #31
 800071c:	fa06 f303 	lsl.w	r3, r6, r3
 8000720:	4213      	tst	r3, r2
 8000722:	f43f af05 	beq.w	8000530 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000726:	f7ff fd97 	bl	8000258 <HAL_GetTick>
 800072a:	eba0 0008 	sub.w	r0, r0, r8
 800072e:	2802      	cmp	r0, #2
 8000730:	d9eb      	bls.n	800070a <HAL_RCC_OscConfig+0x1ee>
 8000732:	e754      	b.n	80005de <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000734:	696a      	ldr	r2, [r5, #20]
 8000736:	4e43      	ldr	r6, [pc, #268]	; (8000844 <HAL_RCC_OscConfig+0x328>)
 8000738:	4943      	ldr	r1, [pc, #268]	; (8000848 <HAL_RCC_OscConfig+0x32c>)
 800073a:	2401      	movs	r4, #1
 800073c:	b31a      	cbz	r2, 8000786 <HAL_RCC_OscConfig+0x26a>
 800073e:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8000742:	fab3 f383 	clz	r3, r3
 8000746:	440b      	add	r3, r1
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	2702      	movs	r7, #2
 800074c:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 800074e:	f7ff fd83 	bl	8000258 <HAL_GetTick>
 8000752:	4680      	mov	r8, r0
 8000754:	fa97 f3a7 	rbit	r3, r7
 8000758:	fa97 f3a7 	rbit	r3, r7
 800075c:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000760:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000762:	fa97 f3a7 	rbit	r3, r7
 8000766:	fab3 f383 	clz	r3, r3
 800076a:	f003 031f 	and.w	r3, r3, #31
 800076e:	fa04 f303 	lsl.w	r3, r4, r3
 8000772:	4213      	tst	r3, r2
 8000774:	f47f aee0 	bne.w	8000538 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000778:	f7ff fd6e 	bl	8000258 <HAL_GetTick>
 800077c:	eba0 0008 	sub.w	r0, r0, r8
 8000780:	2802      	cmp	r0, #2
 8000782:	d9e7      	bls.n	8000754 <HAL_RCC_OscConfig+0x238>
 8000784:	e72b      	b.n	80005de <HAL_RCC_OscConfig+0xc2>
 8000786:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 800078a:	fab3 f383 	clz	r3, r3
 800078e:	440b      	add	r3, r1
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	2702      	movs	r7, #2
 8000794:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000796:	f7ff fd5f 	bl	8000258 <HAL_GetTick>
 800079a:	4680      	mov	r8, r0
 800079c:	fa97 f3a7 	rbit	r3, r7
 80007a0:	fa97 f3a7 	rbit	r3, r7
 80007a4:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007a8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80007aa:	fa97 f3a7 	rbit	r3, r7
 80007ae:	fab3 f383 	clz	r3, r3
 80007b2:	f003 031f 	and.w	r3, r3, #31
 80007b6:	fa04 f303 	lsl.w	r3, r4, r3
 80007ba:	4213      	tst	r3, r2
 80007bc:	f43f aebc 	beq.w	8000538 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007c0:	f7ff fd4a 	bl	8000258 <HAL_GetTick>
 80007c4:	eba0 0008 	sub.w	r0, r0, r8
 80007c8:	2802      	cmp	r0, #2
 80007ca:	d9e7      	bls.n	800079c <HAL_RCC_OscConfig+0x280>
 80007cc:	e707      	b.n	80005de <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007ce:	4c1d      	ldr	r4, [pc, #116]	; (8000844 <HAL_RCC_OscConfig+0x328>)
 80007d0:	69e3      	ldr	r3, [r4, #28]
 80007d2:	00d9      	lsls	r1, r3, #3
 80007d4:	d434      	bmi.n	8000840 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_PWR_CLK_ENABLE();
 80007d6:	69e3      	ldr	r3, [r4, #28]
 80007d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007dc:	61e3      	str	r3, [r4, #28]
 80007de:	69e3      	ldr	r3, [r4, #28]
 80007e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e4:	9301      	str	r3, [sp, #4]
 80007e6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80007e8:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007ea:	4f18      	ldr	r7, [pc, #96]	; (800084c <HAL_RCC_OscConfig+0x330>)
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	05da      	lsls	r2, r3, #23
 80007f0:	d52e      	bpl.n	8000850 <HAL_RCC_OscConfig+0x334>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007f2:	68ab      	ldr	r3, [r5, #8]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d13c      	bne.n	8000872 <HAL_RCC_OscConfig+0x356>
 80007f8:	6a23      	ldr	r3, [r4, #32]
 80007fa:	f043 0301 	orr.w	r3, r3, #1
 80007fe:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000800:	f7ff fd2a 	bl	8000258 <HAL_GetTick>
 8000804:	2702      	movs	r7, #2
 8000806:	4682      	mov	sl, r0
 8000808:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800080a:	f04f 0801 	mov.w	r8, #1
 800080e:	fa97 f3a7 	rbit	r3, r7
 8000812:	fa97 f3a7 	rbit	r3, r7
 8000816:	2b00      	cmp	r3, #0
 8000818:	d06b      	beq.n	80008f2 <HAL_RCC_OscConfig+0x3d6>
 800081a:	6a22      	ldr	r2, [r4, #32]
 800081c:	fa99 f3a9 	rbit	r3, r9
 8000820:	fab3 f383 	clz	r3, r3
 8000824:	f003 031f 	and.w	r3, r3, #31
 8000828:	fa08 f303 	lsl.w	r3, r8, r3
 800082c:	4213      	tst	r3, r2
 800082e:	d057      	beq.n	80008e0 <HAL_RCC_OscConfig+0x3c4>
    if(pwrclkchanged == SET)
 8000830:	2e00      	cmp	r6, #0
 8000832:	f43f ae85 	beq.w	8000540 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000836:	69e3      	ldr	r3, [r4, #28]
 8000838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800083c:	61e3      	str	r3, [r4, #28]
 800083e:	e67f      	b.n	8000540 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000840:	2600      	movs	r6, #0
 8000842:	e7d2      	b.n	80007ea <HAL_RCC_OscConfig+0x2ce>
 8000844:	40021000 	.word	0x40021000
 8000848:	10908120 	.word	0x10908120
 800084c:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000856:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000858:	f7ff fcfe 	bl	8000258 <HAL_GetTick>
 800085c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	05db      	lsls	r3, r3, #23
 8000862:	d4c6      	bmi.n	80007f2 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000864:	f7ff fcf8 	bl	8000258 <HAL_GetTick>
 8000868:	eba0 0008 	sub.w	r0, r0, r8
 800086c:	2864      	cmp	r0, #100	; 0x64
 800086e:	d9f6      	bls.n	800085e <HAL_RCC_OscConfig+0x342>
 8000870:	e6b5      	b.n	80005de <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000872:	bb3b      	cbnz	r3, 80008c4 <HAL_RCC_OscConfig+0x3a8>
 8000874:	6a23      	ldr	r3, [r4, #32]
 8000876:	f023 0301 	bic.w	r3, r3, #1
 800087a:	6223      	str	r3, [r4, #32]
 800087c:	6a23      	ldr	r3, [r4, #32]
 800087e:	f023 0304 	bic.w	r3, r3, #4
 8000882:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000884:	f7ff fce8 	bl	8000258 <HAL_GetTick>
 8000888:	2702      	movs	r7, #2
 800088a:	4682      	mov	sl, r0
 800088c:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800088e:	f04f 0801 	mov.w	r8, #1
 8000892:	fa97 f3a7 	rbit	r3, r7
 8000896:	fa97 f3a7 	rbit	r3, r7
 800089a:	b373      	cbz	r3, 80008fa <HAL_RCC_OscConfig+0x3de>
 800089c:	6a22      	ldr	r2, [r4, #32]
 800089e:	fa99 f3a9 	rbit	r3, r9
 80008a2:	fab3 f383 	clz	r3, r3
 80008a6:	f003 031f 	and.w	r3, r3, #31
 80008aa:	fa08 f303 	lsl.w	r3, r8, r3
 80008ae:	4213      	tst	r3, r2
 80008b0:	d0be      	beq.n	8000830 <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008b2:	f7ff fcd1 	bl	8000258 <HAL_GetTick>
 80008b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80008ba:	eba0 000a 	sub.w	r0, r0, sl
 80008be:	4298      	cmp	r0, r3
 80008c0:	d9e7      	bls.n	8000892 <HAL_RCC_OscConfig+0x376>
 80008c2:	e68c      	b.n	80005de <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008c4:	2b05      	cmp	r3, #5
 80008c6:	6a23      	ldr	r3, [r4, #32]
 80008c8:	d103      	bne.n	80008d2 <HAL_RCC_OscConfig+0x3b6>
 80008ca:	f043 0304 	orr.w	r3, r3, #4
 80008ce:	6223      	str	r3, [r4, #32]
 80008d0:	e792      	b.n	80007f8 <HAL_RCC_OscConfig+0x2dc>
 80008d2:	f023 0301 	bic.w	r3, r3, #1
 80008d6:	6223      	str	r3, [r4, #32]
 80008d8:	6a23      	ldr	r3, [r4, #32]
 80008da:	f023 0304 	bic.w	r3, r3, #4
 80008de:	e78e      	b.n	80007fe <HAL_RCC_OscConfig+0x2e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008e0:	f7ff fcba 	bl	8000258 <HAL_GetTick>
 80008e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80008e8:	eba0 000a 	sub.w	r0, r0, sl
 80008ec:	4298      	cmp	r0, r3
 80008ee:	d98e      	bls.n	800080e <HAL_RCC_OscConfig+0x2f2>
 80008f0:	e675      	b.n	80005de <HAL_RCC_OscConfig+0xc2>
 80008f2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80008f8:	e790      	b.n	800081c <HAL_RCC_OscConfig+0x300>
 80008fa:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000900:	e7cd      	b.n	800089e <HAL_RCC_OscConfig+0x382>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000902:	4c44      	ldr	r4, [pc, #272]	; (8000a14 <HAL_RCC_OscConfig+0x4f8>)
 8000904:	6863      	ldr	r3, [r4, #4]
 8000906:	f003 030c 	and.w	r3, r3, #12
 800090a:	2b08      	cmp	r3, #8
 800090c:	f43f ae42 	beq.w	8000594 <HAL_RCC_OscConfig+0x78>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000910:	2a02      	cmp	r2, #2
 8000912:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000916:	d158      	bne.n	80009ca <HAL_RCC_OscConfig+0x4ae>
 8000918:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800091c:	fab3 f383 	clz	r3, r3
 8000920:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000924:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800092e:	f7ff fc93 	bl	8000258 <HAL_GetTick>
 8000932:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8000936:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000938:	2601      	movs	r6, #1
 800093a:	fa97 f3a7 	rbit	r3, r7
 800093e:	6822      	ldr	r2, [r4, #0]
 8000940:	fa97 f3a7 	rbit	r3, r7
 8000944:	fab3 f383 	clz	r3, r3
 8000948:	f003 031f 	and.w	r3, r3, #31
 800094c:	fa06 f303 	lsl.w	r3, r6, r3
 8000950:	4213      	tst	r3, r2
 8000952:	d133      	bne.n	80009bc <HAL_RCC_OscConfig+0x4a0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000954:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000956:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000958:	f023 030f 	bic.w	r3, r3, #15
 800095c:	4313      	orrs	r3, r2
 800095e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000960:	6862      	ldr	r2, [r4, #4]
 8000962:	6a2b      	ldr	r3, [r5, #32]
 8000964:	69e9      	ldr	r1, [r5, #28]
 8000966:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 800096a:	430b      	orrs	r3, r1
 800096c:	4313      	orrs	r3, r2
 800096e:	6063      	str	r3, [r4, #4]
 8000970:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000974:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000978:	fab3 f383 	clz	r3, r3
 800097c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000980:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800098a:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800098c:	f7ff fc64 	bl	8000258 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000990:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8000992:	4607      	mov	r7, r0
 8000994:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000998:	6822      	ldr	r2, [r4, #0]
 800099a:	fa95 f3a5 	rbit	r3, r5
 800099e:	fab3 f383 	clz	r3, r3
 80009a2:	f003 031f 	and.w	r3, r3, #31
 80009a6:	fa06 f303 	lsl.w	r3, r6, r3
 80009aa:	4213      	tst	r3, r2
 80009ac:	f47f adcc 	bne.w	8000548 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009b0:	f7ff fc52 	bl	8000258 <HAL_GetTick>
 80009b4:	1bc0      	subs	r0, r0, r7
 80009b6:	2802      	cmp	r0, #2
 80009b8:	d9ec      	bls.n	8000994 <HAL_RCC_OscConfig+0x478>
 80009ba:	e610      	b.n	80005de <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009bc:	f7ff fc4c 	bl	8000258 <HAL_GetTick>
 80009c0:	eba0 0008 	sub.w	r0, r0, r8
 80009c4:	2802      	cmp	r0, #2
 80009c6:	d9b8      	bls.n	800093a <HAL_RCC_OscConfig+0x41e>
 80009c8:	e609      	b.n	80005de <HAL_RCC_OscConfig+0xc2>
 80009ca:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80009ce:	fab3 f383 	clz	r3, r3
 80009d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80009d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009e0:	f7ff fc3a 	bl	8000258 <HAL_GetTick>
 80009e4:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80009e8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009ea:	2601      	movs	r6, #1
 80009ec:	fa95 f3a5 	rbit	r3, r5
 80009f0:	6822      	ldr	r2, [r4, #0]
 80009f2:	fa95 f3a5 	rbit	r3, r5
 80009f6:	fab3 f383 	clz	r3, r3
 80009fa:	f003 031f 	and.w	r3, r3, #31
 80009fe:	fa06 f303 	lsl.w	r3, r6, r3
 8000a02:	4213      	tst	r3, r2
 8000a04:	f43f ada0 	beq.w	8000548 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a08:	f7ff fc26 	bl	8000258 <HAL_GetTick>
 8000a0c:	1bc0      	subs	r0, r0, r7
 8000a0e:	2802      	cmp	r0, #2
 8000a10:	d9ec      	bls.n	80009ec <HAL_RCC_OscConfig+0x4d0>
 8000a12:	e5e4      	b.n	80005de <HAL_RCC_OscConfig+0xc2>
 8000a14:	40021000 	.word	0x40021000

08000a18 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000a18:	4911      	ldr	r1, [pc, #68]	; (8000a60 <HAL_RCC_GetSysClockFreq+0x48>)
 8000a1a:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000a1c:	f003 020c 	and.w	r2, r3, #12
 8000a20:	2a08      	cmp	r2, #8
 8000a22:	d11a      	bne.n	8000a5a <HAL_RCC_GetSysClockFreq+0x42>
 8000a24:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000a28:	fa92 f2a2 	rbit	r2, r2
 8000a2c:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000a2e:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000a32:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8000a34:	fa90 f0a0 	rbit	r0, r0
 8000a38:	fab0 f080 	clz	r0, r0
 8000a3c:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000a40:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000a44:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000a46:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000a48:	4a06      	ldr	r2, [pc, #24]	; (8000a64 <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000a4a:	4807      	ldr	r0, [pc, #28]	; (8000a68 <HAL_RCC_GetSysClockFreq+0x50>)
 8000a4c:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000a4e:	4807      	ldr	r0, [pc, #28]	; (8000a6c <HAL_RCC_GetSysClockFreq+0x54>)
 8000a50:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000a54:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000a56:	4348      	muls	r0, r1
 8000a58:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8000a5a:	4804      	ldr	r0, [pc, #16]	; (8000a6c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	40021000 	.word	0x40021000
 8000a64:	08000fbc 	.word	0x08000fbc
 8000a68:	08000fcc 	.word	0x08000fcc
 8000a6c:	007a1200 	.word	0x007a1200

08000a70 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a70:	4a5c      	ldr	r2, [pc, #368]	; (8000be4 <HAL_RCC_ClockConfig+0x174>)
 8000a72:	6813      	ldr	r3, [r2, #0]
 8000a74:	f003 0307 	and.w	r3, r3, #7
 8000a78:	428b      	cmp	r3, r1
{
 8000a7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a7e:	4606      	mov	r6, r0
 8000a80:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a82:	d330      	bcc.n	8000ae6 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a84:	6832      	ldr	r2, [r6, #0]
 8000a86:	0791      	lsls	r1, r2, #30
 8000a88:	d43a      	bmi.n	8000b00 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a8a:	07d2      	lsls	r2, r2, #31
 8000a8c:	d440      	bmi.n	8000b10 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a8e:	4a55      	ldr	r2, [pc, #340]	; (8000be4 <HAL_RCC_ClockConfig+0x174>)
 8000a90:	6813      	ldr	r3, [r2, #0]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	429d      	cmp	r5, r3
 8000a98:	f0c0 8092 	bcc.w	8000bc0 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a9c:	6832      	ldr	r2, [r6, #0]
 8000a9e:	4c52      	ldr	r4, [pc, #328]	; (8000be8 <HAL_RCC_ClockConfig+0x178>)
 8000aa0:	f012 0f04 	tst.w	r2, #4
 8000aa4:	f040 8097 	bne.w	8000bd6 <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000aa8:	0713      	lsls	r3, r2, #28
 8000aaa:	d506      	bpl.n	8000aba <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000aac:	6863      	ldr	r3, [r4, #4]
 8000aae:	6932      	ldr	r2, [r6, #16]
 8000ab0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000ab4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000ab8:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000aba:	f7ff ffad 	bl	8000a18 <HAL_RCC_GetSysClockFreq>
 8000abe:	6863      	ldr	r3, [r4, #4]
 8000ac0:	22f0      	movs	r2, #240	; 0xf0
 8000ac2:	fa92 f2a2 	rbit	r2, r2
 8000ac6:	fab2 f282 	clz	r2, r2
 8000aca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ace:	40d3      	lsrs	r3, r2
 8000ad0:	4a46      	ldr	r2, [pc, #280]	; (8000bec <HAL_RCC_ClockConfig+0x17c>)
 8000ad2:	5cd3      	ldrb	r3, [r2, r3]
 8000ad4:	40d8      	lsrs	r0, r3
 8000ad6:	4b46      	ldr	r3, [pc, #280]	; (8000bf0 <HAL_RCC_ClockConfig+0x180>)
 8000ad8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000ada:	2000      	movs	r0, #0
 8000adc:	f7ff fb7a 	bl	80001d4 <HAL_InitTick>
  return HAL_OK;
 8000ae0:	2000      	movs	r0, #0
}
 8000ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ae6:	6813      	ldr	r3, [r2, #0]
 8000ae8:	f023 0307 	bic.w	r3, r3, #7
 8000aec:	430b      	orrs	r3, r1
 8000aee:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000af0:	6813      	ldr	r3, [r2, #0]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d0c4      	beq.n	8000a84 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000afa:	2001      	movs	r0, #1
 8000afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b00:	4939      	ldr	r1, [pc, #228]	; (8000be8 <HAL_RCC_ClockConfig+0x178>)
 8000b02:	68b0      	ldr	r0, [r6, #8]
 8000b04:	684b      	ldr	r3, [r1, #4]
 8000b06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b0a:	4303      	orrs	r3, r0
 8000b0c:	604b      	str	r3, [r1, #4]
 8000b0e:	e7bc      	b.n	8000a8a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b10:	6872      	ldr	r2, [r6, #4]
 8000b12:	4c35      	ldr	r4, [pc, #212]	; (8000be8 <HAL_RCC_ClockConfig+0x178>)
 8000b14:	2a01      	cmp	r2, #1
 8000b16:	d128      	bne.n	8000b6a <HAL_RCC_ClockConfig+0xfa>
 8000b18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b1c:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b20:	6821      	ldr	r1, [r4, #0]
 8000b22:	fa93 f3a3 	rbit	r3, r3
 8000b26:	fab3 f383 	clz	r3, r3
 8000b2a:	f003 031f 	and.w	r3, r3, #31
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b34:	d0e1      	beq.n	8000afa <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b36:	6863      	ldr	r3, [r4, #4]
 8000b38:	f023 0303 	bic.w	r3, r3, #3
 8000b3c:	431a      	orrs	r2, r3
 8000b3e:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8000b40:	f7ff fb8a 	bl	8000258 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b44:	6873      	ldr	r3, [r6, #4]
 8000b46:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8000b48:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b4a:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b4e:	d11f      	bne.n	8000b90 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b50:	6863      	ldr	r3, [r4, #4]
 8000b52:	f003 030c 	and.w	r3, r3, #12
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	d099      	beq.n	8000a8e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b5a:	f7ff fb7d 	bl	8000258 <HAL_GetTick>
 8000b5e:	1bc0      	subs	r0, r0, r7
 8000b60:	4540      	cmp	r0, r8
 8000b62:	d9f5      	bls.n	8000b50 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8000b64:	2003      	movs	r0, #3
 8000b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b6a:	2a02      	cmp	r2, #2
 8000b6c:	bf0c      	ite	eq
 8000b6e:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000b72:	2302      	movne	r3, #2
 8000b74:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b78:	6820      	ldr	r0, [r4, #0]
 8000b7a:	fa93 f3a3 	rbit	r3, r3
 8000b7e:	fab3 f383 	clz	r3, r3
 8000b82:	f003 031f 	and.w	r3, r3, #31
 8000b86:	2101      	movs	r1, #1
 8000b88:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8c:	4203      	tst	r3, r0
 8000b8e:	e7d1      	b.n	8000b34 <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b90:	2b02      	cmp	r3, #2
 8000b92:	d110      	bne.n	8000bb6 <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b94:	6863      	ldr	r3, [r4, #4]
 8000b96:	f003 030c 	and.w	r3, r3, #12
 8000b9a:	2b08      	cmp	r3, #8
 8000b9c:	f43f af77 	beq.w	8000a8e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ba0:	f7ff fb5a 	bl	8000258 <HAL_GetTick>
 8000ba4:	1bc0      	subs	r0, r0, r7
 8000ba6:	4540      	cmp	r0, r8
 8000ba8:	d9f4      	bls.n	8000b94 <HAL_RCC_ClockConfig+0x124>
 8000baa:	e7db      	b.n	8000b64 <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bac:	f7ff fb54 	bl	8000258 <HAL_GetTick>
 8000bb0:	1bc0      	subs	r0, r0, r7
 8000bb2:	4540      	cmp	r0, r8
 8000bb4:	d8d6      	bhi.n	8000b64 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000bb6:	6863      	ldr	r3, [r4, #4]
 8000bb8:	f013 0f0c 	tst.w	r3, #12
 8000bbc:	d1f6      	bne.n	8000bac <HAL_RCC_ClockConfig+0x13c>
 8000bbe:	e766      	b.n	8000a8e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bc0:	6813      	ldr	r3, [r2, #0]
 8000bc2:	f023 0307 	bic.w	r3, r3, #7
 8000bc6:	432b      	orrs	r3, r5
 8000bc8:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000bca:	6813      	ldr	r3, [r2, #0]
 8000bcc:	f003 0307 	and.w	r3, r3, #7
 8000bd0:	429d      	cmp	r5, r3
 8000bd2:	d192      	bne.n	8000afa <HAL_RCC_ClockConfig+0x8a>
 8000bd4:	e762      	b.n	8000a9c <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000bd6:	6863      	ldr	r3, [r4, #4]
 8000bd8:	68f1      	ldr	r1, [r6, #12]
 8000bda:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000bde:	430b      	orrs	r3, r1
 8000be0:	6063      	str	r3, [r4, #4]
 8000be2:	e761      	b.n	8000aa8 <HAL_RCC_ClockConfig+0x38>
 8000be4:	40022000 	.word	0x40022000
 8000be8:	40021000 	.word	0x40021000
 8000bec:	08000fdc 	.word	0x08000fdc
 8000bf0:	20000008 	.word	0x20000008

08000bf4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000bf4:	4b01      	ldr	r3, [pc, #4]	; (8000bfc <HAL_RCC_GetHCLKFreq+0x8>)
 8000bf6:	6818      	ldr	r0, [r3, #0]
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	20000008 	.word	0x20000008

08000c00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c00:	b510      	push	{r4, lr}
 8000c02:	b090      	sub	sp, #64	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c08:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c0a:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c0c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c10:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c12:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c14:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c16:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000c18:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c1a:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c1c:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c1e:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000c20:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c22:	f7ff fc7b 	bl	800051c <HAL_RCC_OscConfig>
 8000c26:	b100      	cbz	r0, 8000c2a <SystemClock_Config+0x2a>
 8000c28:	e7fe      	b.n	8000c28 <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2a:	230f      	movs	r3, #15
 8000c2c:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c2e:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c30:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c34:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c36:	4621      	mov	r1, r4
 8000c38:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c3a:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c3c:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c3e:	f7ff ff17 	bl	8000a70 <HAL_RCC_ClockConfig>
 8000c42:	4604      	mov	r4, r0
 8000c44:	b100      	cbz	r0, 8000c48 <SystemClock_Config+0x48>
 8000c46:	e7fe      	b.n	8000c46 <SystemClock_Config+0x46>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000c48:	f7ff ffd4 	bl	8000bf4 <HAL_RCC_GetHCLKFreq>
 8000c4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c50:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c54:	f7ff fb60 	bl	8000318 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000c58:	2004      	movs	r0, #4
 8000c5a:	f7ff fb73 	bl	8000344 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000c5e:	4622      	mov	r2, r4
 8000c60:	4621      	mov	r1, r4
 8000c62:	f04f 30ff 	mov.w	r0, #4294967295
 8000c66:	f7ff fb23 	bl	80002b0 <HAL_NVIC_SetPriority>
}
 8000c6a:	b010      	add	sp, #64	; 0x40
 8000c6c:	bd10      	pop	{r4, pc}
	...

08000c70 <main>:
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 8000c74:	f7ff fad2 	bl	800021c <HAL_Init>
  SystemClock_Config();
 8000c78:	f7ff ffc2 	bl	8000c00 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7c:	4b5c      	ldr	r3, [pc, #368]	; (8000df0 <main+0x180>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000c7e:	485d      	ldr	r0, [pc, #372]	; (8000df4 <main+0x184>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c80:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c82:	4f5d      	ldr	r7, [pc, #372]	; (8000df8 <main+0x188>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c84:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000c88:	615a      	str	r2, [r3, #20]
 8000c8a:	695a      	ldr	r2, [r3, #20]
 8000c8c:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8000c90:	9200      	str	r2, [sp, #0]
 8000c92:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c94:	695a      	ldr	r2, [r3, #20]
 8000c96:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000c9a:	615a      	str	r2, [r3, #20]
 8000c9c:	695a      	ldr	r2, [r3, #20]
 8000c9e:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000ca2:	9201      	str	r2, [sp, #4]
 8000ca4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca6:	695a      	ldr	r2, [r3, #20]
 8000ca8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000cac:	615a      	str	r2, [r3, #20]
 8000cae:	695a      	ldr	r2, [r3, #20]
 8000cb0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000cb4:	9202      	str	r2, [sp, #8]
 8000cb6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb8:	695a      	ldr	r2, [r3, #20]
 8000cba:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000cbe:	615a      	str	r2, [r3, #20]
 8000cc0:	695a      	ldr	r2, [r3, #20]
 8000cc2:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000cc6:	9203      	str	r2, [sp, #12]
 8000cc8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cca:	695a      	ldr	r2, [r3, #20]
 8000ccc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000cd0:	615a      	str	r2, [r3, #20]
 8000cd2:	695b      	ldr	r3, [r3, #20]
 8000cd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cd8:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	213c      	movs	r1, #60	; 0x3c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cde:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000ce0:	f7ff fc12 	bl	8000508 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2106      	movs	r1, #6
 8000ce8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cec:	f7ff fc0c 	bl	8000508 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12 
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f24b 0107 	movw	r1, #45063	; 0xb007
 8000cf6:	4841      	ldr	r0, [pc, #260]	; (8000dfc <main+0x18c>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf8:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12 
 8000cfa:	f7ff fc05 	bl	8000508 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d02:	a905      	add	r1, sp, #20
 8000d04:	483b      	ldr	r0, [pc, #236]	; (8000df4 <main+0x184>)
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d06:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d08:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d0e:	f7ff fb2b 	bl	8000368 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000d12:	233c      	movs	r3, #60	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d14:	a905      	add	r1, sp, #20
 8000d16:	4837      	ldr	r0, [pc, #220]	; (8000df4 <main+0x184>)
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000d18:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2602      	movs	r6, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d20:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d22:	f7ff fb21 	bl	8000368 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d26:	a905      	add	r1, sp, #20
 8000d28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d30:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d34:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d36:	f7ff fb17 	bl	8000368 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000d3a:	2306      	movs	r3, #6
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3c:	a905      	add	r1, sp, #20
 8000d3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000d42:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d48:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	f7ff fb0d 	bl	8000368 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12 
 8000d4e:	f24b 0307 	movw	r3, #45063	; 0xb007
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d52:	a905      	add	r1, sp, #20
 8000d54:	4829      	ldr	r0, [pc, #164]	; (8000dfc <main+0x18c>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12 
 8000d56:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8000d5c:	f04f 0804 	mov.w	r8, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d60:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d62:	f7ff fb01 	bl	8000368 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d66:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6a:	a905      	add	r1, sp, #20
 8000d6c:	4821      	ldr	r0, [pc, #132]	; (8000df4 <main+0x184>)
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d6e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8000d76:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d7a:	f7ff faf5 	bl	8000368 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000d7e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d82:	a905      	add	r1, sp, #20
 8000d84:	481b      	ldr	r0, [pc, #108]	; (8000df4 <main+0x184>)
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000d86:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d8a:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8c:	f7ff faec 	bl	8000368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d90:	a905      	add	r1, sp, #20
 8000d92:	481b      	ldr	r0, [pc, #108]	; (8000e00 <main+0x190>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d96:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d9a:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d9c:	f7ff fae4 	bl	8000368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB6 PB7 PB8 
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8000da0:	f44f 7372 	mov.w	r3, #968	; 0x3c8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da4:	a905      	add	r1, sp, #20
 8000da6:	4815      	ldr	r0, [pc, #84]	; (8000dfc <main+0x18c>)
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
 8000da8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dac:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dae:	f7ff fadb 	bl	8000368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000db2:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db4:	a905      	add	r1, sp, #20
 8000db6:	4811      	ldr	r0, [pc, #68]	; (8000dfc <main+0x18c>)
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000db8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8000dc0:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc2:	f7ff fad1 	bl	8000368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000dc6:	2320      	movs	r3, #32
 8000dc8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dca:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8000dcc:	230a      	movs	r3, #10
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dce:	480b      	ldr	r0, [pc, #44]	; (8000dfc <main+0x18c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8000dd6:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd8:	f7ff fac6 	bl	8000368 <HAL_GPIO_Init>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8000ddc:	4c07      	ldr	r4, [pc, #28]	; (8000dfc <main+0x18c>)
 8000dde:	4620      	mov	r0, r4
 8000de0:	2102      	movs	r1, #2
 8000de2:	f7ff fb96 	bl	8000512 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8000de6:	20c8      	movs	r0, #200	; 0xc8
 8000de8:	f7ff fa3c 	bl	8000264 <HAL_Delay>
 8000dec:	e7f7      	b.n	8000dde <main+0x16e>
 8000dee:	bf00      	nop
 8000df0:	40021000 	.word	0x40021000
 8000df4:	48000800 	.word	0x48000800
 8000df8:	10110000 	.word	0x10110000
 8000dfc:	48000400 	.word	0x48000400
 8000e00:	48000c00 	.word	0x48000c00

08000e04 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e04:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <HAL_MspInit+0x78>)
{
 8000e06:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e08:	699a      	ldr	r2, [r3, #24]
 8000e0a:	f042 0201 	orr.w	r2, r2, #1
 8000e0e:	619a      	str	r2, [r3, #24]
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e18:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e1c:	f7ff fa36 	bl	800028c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	4611      	mov	r1, r2
 8000e24:	f06f 000b 	mvn.w	r0, #11
 8000e28:	f7ff fa42 	bl	80002b0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	4611      	mov	r1, r2
 8000e30:	f06f 000a 	mvn.w	r0, #10
 8000e34:	f7ff fa3c 	bl	80002b0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	f06f 0009 	mvn.w	r0, #9
 8000e40:	f7ff fa36 	bl	80002b0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000e44:	2200      	movs	r2, #0
 8000e46:	4611      	mov	r1, r2
 8000e48:	f06f 0004 	mvn.w	r0, #4
 8000e4c:	f7ff fa30 	bl	80002b0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000e50:	2200      	movs	r2, #0
 8000e52:	4611      	mov	r1, r2
 8000e54:	f06f 0003 	mvn.w	r0, #3
 8000e58:	f7ff fa2a 	bl	80002b0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	4611      	mov	r1, r2
 8000e60:	f06f 0001 	mvn.w	r0, #1
 8000e64:	f7ff fa24 	bl	80002b0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e70:	f7ff fa1e 	bl	80002b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e74:	b003      	add	sp, #12
 8000e76:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e7a:	bf00      	nop
 8000e7c:	40021000 	.word	0x40021000

08000e80 <NMI_Handler>:
 8000e80:	4770      	bx	lr

08000e82 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000e82:	e7fe      	b.n	8000e82 <HardFault_Handler>

08000e84 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000e84:	e7fe      	b.n	8000e84 <MemManage_Handler>

08000e86 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000e86:	e7fe      	b.n	8000e86 <BusFault_Handler>

08000e88 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000e88:	e7fe      	b.n	8000e88 <UsageFault_Handler>

08000e8a <SVC_Handler>:
 8000e8a:	4770      	bx	lr

08000e8c <DebugMon_Handler>:
 8000e8c:	4770      	bx	lr

08000e8e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8000e8e:	4770      	bx	lr

08000e90 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000e90:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e92:	f7ff f9d5 	bl	8000240 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8000e9a:	f7ff ba60 	b.w	800035e <HAL_SYSTICK_IRQHandler>
	...

08000ea0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea0:	4915      	ldr	r1, [pc, #84]	; (8000ef8 <SystemInit+0x58>)
 8000ea2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000ea6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000eae:	4b13      	ldr	r3, [pc, #76]	; (8000efc <SystemInit+0x5c>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	f042 0201 	orr.w	r2, r2, #1
 8000eb6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8000eb8:	6858      	ldr	r0, [r3, #4]
 8000eba:	4a11      	ldr	r2, [pc, #68]	; (8000f00 <SystemInit+0x60>)
 8000ebc:	4002      	ands	r2, r0
 8000ebe:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000ec6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000eca:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000ed2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000ed4:	685a      	ldr	r2, [r3, #4]
 8000ed6:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000eda:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8000edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ede:	f022 020f 	bic.w	r2, r2, #15
 8000ee2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8000ee4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000ee6:	4a07      	ldr	r2, [pc, #28]	; (8000f04 <SystemInit+0x64>)
 8000ee8:	4002      	ands	r2, r0
 8000eea:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ef0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ef4:	608b      	str	r3, [r1, #8]
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00
 8000efc:	40021000 	.word	0x40021000
 8000f00:	f87fc00c 	.word	0xf87fc00c
 8000f04:	ff00fccc 	.word	0xff00fccc

08000f08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f40 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f0c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f0e:	e003      	b.n	8000f18 <LoopCopyDataInit>

08000f10 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f12:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f14:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f16:	3104      	adds	r1, #4

08000f18 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f18:	480b      	ldr	r0, [pc, #44]	; (8000f48 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f1c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f1e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f20:	d3f6      	bcc.n	8000f10 <CopyDataInit>
	ldr	r2, =_sbss
 8000f22:	4a0b      	ldr	r2, [pc, #44]	; (8000f50 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f24:	e002      	b.n	8000f2c <LoopFillZerobss>

08000f26 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f26:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f28:	f842 3b04 	str.w	r3, [r2], #4

08000f2c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f2c:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <LoopForever+0x16>)
	cmp	r2, r3
 8000f2e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f30:	d3f9      	bcc.n	8000f26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f32:	f7ff ffb5 	bl	8000ea0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f36:	f000 f811 	bl	8000f5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f3a:	f7ff fe99 	bl	8000c70 <main>

08000f3e <LoopForever>:

LoopForever:
    b LoopForever
 8000f3e:	e7fe      	b.n	8000f3e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f40:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000f44:	08000ff4 	.word	0x08000ff4
	ldr	r0, =_sdata
 8000f48:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f4c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000f50:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000f54:	2000002c 	.word	0x2000002c

08000f58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f58:	e7fe      	b.n	8000f58 <ADC1_2_IRQHandler>
	...

08000f5c <__libc_init_array>:
 8000f5c:	b570      	push	{r4, r5, r6, lr}
 8000f5e:	4e0d      	ldr	r6, [pc, #52]	; (8000f94 <__libc_init_array+0x38>)
 8000f60:	4c0d      	ldr	r4, [pc, #52]	; (8000f98 <__libc_init_array+0x3c>)
 8000f62:	1ba4      	subs	r4, r4, r6
 8000f64:	10a4      	asrs	r4, r4, #2
 8000f66:	2500      	movs	r5, #0
 8000f68:	42a5      	cmp	r5, r4
 8000f6a:	d109      	bne.n	8000f80 <__libc_init_array+0x24>
 8000f6c:	4e0b      	ldr	r6, [pc, #44]	; (8000f9c <__libc_init_array+0x40>)
 8000f6e:	4c0c      	ldr	r4, [pc, #48]	; (8000fa0 <__libc_init_array+0x44>)
 8000f70:	f000 f818 	bl	8000fa4 <_init>
 8000f74:	1ba4      	subs	r4, r4, r6
 8000f76:	10a4      	asrs	r4, r4, #2
 8000f78:	2500      	movs	r5, #0
 8000f7a:	42a5      	cmp	r5, r4
 8000f7c:	d105      	bne.n	8000f8a <__libc_init_array+0x2e>
 8000f7e:	bd70      	pop	{r4, r5, r6, pc}
 8000f80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f84:	4798      	blx	r3
 8000f86:	3501      	adds	r5, #1
 8000f88:	e7ee      	b.n	8000f68 <__libc_init_array+0xc>
 8000f8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f8e:	4798      	blx	r3
 8000f90:	3501      	adds	r5, #1
 8000f92:	e7f2      	b.n	8000f7a <__libc_init_array+0x1e>
 8000f94:	08000fec 	.word	0x08000fec
 8000f98:	08000fec 	.word	0x08000fec
 8000f9c:	08000fec 	.word	0x08000fec
 8000fa0:	08000ff0 	.word	0x08000ff0

08000fa4 <_init>:
 8000fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fa6:	bf00      	nop
 8000fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000faa:	bc08      	pop	{r3}
 8000fac:	469e      	mov	lr, r3
 8000fae:	4770      	bx	lr

08000fb0 <_fini>:
 8000fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fb2:	bf00      	nop
 8000fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fb6:	bc08      	pop	{r3}
 8000fb8:	469e      	mov	lr, r3
 8000fba:	4770      	bx	lr
