
odczytanie_stanu_wejœcia.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000df8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08000f8c  08000f8c  00010f8c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000fbc  08000fbc  00010fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000fc0  08000fc0  00010fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08000fc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          00000020  2000000c  2000000c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000002c  2000002c  0002000c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00008887  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000148f  00000000  00000000  000288c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000012ee  00000000  00000000  00029d52  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000348  00000000  00000000  0002b040  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000548  00000000  00000000  0002b388  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000215b  00000000  00000000  0002b8d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000018d5  00000000  00000000  0002da2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0002f300  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000006cc  00000000  00000000  0002f37c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000f74 	.word	0x08000f74

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08000f74 	.word	0x08000f74

080001d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001d4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001d6:	4a0e      	ldr	r2, [pc, #56]	; (8000210 <HAL_InitTick+0x3c>)
 80001d8:	4b0e      	ldr	r3, [pc, #56]	; (8000214 <HAL_InitTick+0x40>)
{
 80001da:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001dc:	7818      	ldrb	r0, [r3, #0]
 80001de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001e2:	fbb3 f3f0 	udiv	r3, r3, r0
 80001e6:	6810      	ldr	r0, [r2, #0]
 80001e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80001ec:	f000 f880 	bl	80002f0 <HAL_SYSTICK_Config>
 80001f0:	4604      	mov	r4, r0
 80001f2:	b958      	cbnz	r0, 800020c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001f4:	2d0f      	cmp	r5, #15
 80001f6:	d809      	bhi.n	800020c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001f8:	4602      	mov	r2, r0
 80001fa:	4629      	mov	r1, r5
 80001fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000200:	f000 f842 	bl	8000288 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000204:	4b04      	ldr	r3, [pc, #16]	; (8000218 <HAL_InitTick+0x44>)
 8000206:	4620      	mov	r0, r4
 8000208:	601d      	str	r5, [r3, #0]
 800020a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800020c:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 800020e:	bd38      	pop	{r3, r4, r5, pc}
 8000210:	20000008 	.word	0x20000008
 8000214:	20000000 	.word	0x20000000
 8000218:	20000004 	.word	0x20000004

0800021c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800021c:	4a07      	ldr	r2, [pc, #28]	; (800023c <HAL_Init+0x20>)
{
 800021e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000220:	6813      	ldr	r3, [r2, #0]
 8000222:	f043 0310 	orr.w	r3, r3, #16
 8000226:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000228:	2003      	movs	r0, #3
 800022a:	f000 f81b 	bl	8000264 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800022e:	2000      	movs	r0, #0
 8000230:	f7ff ffd0 	bl	80001d4 <HAL_InitTick>
  HAL_MspInit();
 8000234:	f000 fdce 	bl	8000dd4 <HAL_MspInit>
}
 8000238:	2000      	movs	r0, #0
 800023a:	bd08      	pop	{r3, pc}
 800023c:	40022000 	.word	0x40022000

08000240 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000240:	4a03      	ldr	r2, [pc, #12]	; (8000250 <HAL_IncTick+0x10>)
 8000242:	4b04      	ldr	r3, [pc, #16]	; (8000254 <HAL_IncTick+0x14>)
 8000244:	6811      	ldr	r1, [r2, #0]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	440b      	add	r3, r1
 800024a:	6013      	str	r3, [r2, #0]
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	20000028 	.word	0x20000028
 8000254:	20000000 	.word	0x20000000

08000258 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000258:	4b01      	ldr	r3, [pc, #4]	; (8000260 <HAL_GetTick+0x8>)
 800025a:	6818      	ldr	r0, [r3, #0]
}
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	20000028 	.word	0x20000028

08000264 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4a07      	ldr	r2, [pc, #28]	; (8000284 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000266:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000268:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800026c:	041b      	lsls	r3, r3, #16
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000274:	0200      	lsls	r0, r0, #8
 8000276:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800027a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800027e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000280:	60d3      	str	r3, [r2, #12]
 8000282:	4770      	bx	lr
 8000284:	e000ed00 	.word	0xe000ed00

08000288 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000288:	4b17      	ldr	r3, [pc, #92]	; (80002e8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800028a:	b530      	push	{r4, r5, lr}
 800028c:	68dc      	ldr	r4, [r3, #12]
 800028e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000292:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000296:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000298:	2b04      	cmp	r3, #4
 800029a:	bf28      	it	cs
 800029c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800029e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002a0:	f04f 0501 	mov.w	r5, #1
 80002a4:	fa05 f303 	lsl.w	r3, r5, r3
 80002a8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002ac:	bf8c      	ite	hi
 80002ae:	3c03      	subhi	r4, #3
 80002b0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002b2:	4019      	ands	r1, r3
 80002b4:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002b6:	fa05 f404 	lsl.w	r4, r5, r4
 80002ba:	3c01      	subs	r4, #1
 80002bc:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80002be:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002c0:	ea42 0201 	orr.w	r2, r2, r1
 80002c4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c8:	bfaf      	iteee	ge
 80002ca:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ce:	f000 000f 	andlt.w	r0, r0, #15
 80002d2:	4b06      	ldrlt	r3, [pc, #24]	; (80002ec <HAL_NVIC_SetPriority+0x64>)
 80002d4:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d6:	bfa5      	ittet	ge
 80002d8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002dc:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002de:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002e4:	bd30      	pop	{r4, r5, pc}
 80002e6:	bf00      	nop
 80002e8:	e000ed00 	.word	0xe000ed00
 80002ec:	e000ed14 	.word	0xe000ed14

080002f0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002f0:	3801      	subs	r0, #1
 80002f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002f6:	d20a      	bcs.n	800030e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002f8:	4b06      	ldr	r3, [pc, #24]	; (8000314 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fa:	4a07      	ldr	r2, [pc, #28]	; (8000318 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002fc:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fe:	21f0      	movs	r1, #240	; 0xf0
 8000300:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000304:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000306:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000308:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800030a:	601a      	str	r2, [r3, #0]
 800030c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800030e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	e000e010 	.word	0xe000e010
 8000318:	e000ed00 	.word	0xe000ed00

0800031c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800031c:	4b04      	ldr	r3, [pc, #16]	; (8000330 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800031e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000320:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000322:	bf0c      	ite	eq
 8000324:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000328:	f022 0204 	bicne.w	r2, r2, #4
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	4770      	bx	lr
 8000330:	e000e010 	.word	0xe000e010

08000334 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000334:	4770      	bx	lr

08000336 <HAL_SYSTICK_IRQHandler>:
{
 8000336:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000338:	f7ff fffc 	bl	8000334 <HAL_SYSTICK_Callback>
 800033c:	bd08      	pop	{r3, pc}
	...

08000340 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000340:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000344:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000348:	f8df 9190 	ldr.w	r9, [pc, #400]	; 80004dc <HAL_GPIO_Init+0x19c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800034c:	4a61      	ldr	r2, [pc, #388]	; (80004d4 <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00U;
 800034e:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000350:	fa38 f403 	lsrs.w	r4, r8, r3
 8000354:	d102      	bne.n	800035c <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8000356:	b003      	add	sp, #12
 8000358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800035c:	f04f 0e01 	mov.w	lr, #1
 8000360:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 8000364:	ea18 060e 	ands.w	r6, r8, lr
 8000368:	f000 80a6 	beq.w	80004b8 <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800036c:	684c      	ldr	r4, [r1, #4]
 800036e:	f024 0710 	bic.w	r7, r4, #16
 8000372:	2f02      	cmp	r7, #2
 8000374:	d116      	bne.n	80003a4 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 8000376:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800037a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800037e:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000382:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000386:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800038a:	f04f 0c0f 	mov.w	ip, #15
 800038e:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000392:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000396:	690d      	ldr	r5, [r1, #16]
 8000398:	fa05 f50b 	lsl.w	r5, r5, fp
 800039c:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 80003a0:	f8ca 5020 	str.w	r5, [sl, #32]
 80003a4:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003a8:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80003aa:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003ae:	fa05 f50a 	lsl.w	r5, r5, sl
 80003b2:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003b4:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003b8:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003bc:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003c0:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003c2:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003c6:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80003c8:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003cc:	d811      	bhi.n	80003f2 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80003ce:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003d0:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80003d4:	68cf      	ldr	r7, [r1, #12]
 80003d6:	fa07 fc0a 	lsl.w	ip, r7, sl
 80003da:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80003de:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80003e0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80003e2:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003e6:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80003ea:	409f      	lsls	r7, r3
 80003ec:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80003f0:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80003f2:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80003f4:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80003f6:	688f      	ldr	r7, [r1, #8]
 80003f8:	fa07 f70a 	lsl.w	r7, r7, sl
 80003fc:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80003fe:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000400:	00e5      	lsls	r5, r4, #3
 8000402:	d559      	bpl.n	80004b8 <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000404:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000408:	f045 0501 	orr.w	r5, r5, #1
 800040c:	f8c9 5018 	str.w	r5, [r9, #24]
 8000410:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000414:	f023 0703 	bic.w	r7, r3, #3
 8000418:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800041c:	f005 0501 	and.w	r5, r5, #1
 8000420:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000424:	9501      	str	r5, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000426:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800042a:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800042c:	68bd      	ldr	r5, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800042e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000432:	f04f 0e0f 	mov.w	lr, #15
 8000436:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800043a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800043e:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000442:	d03b      	beq.n	80004bc <HAL_GPIO_Init+0x17c>
 8000444:	4d24      	ldr	r5, [pc, #144]	; (80004d8 <HAL_GPIO_Init+0x198>)
 8000446:	42a8      	cmp	r0, r5
 8000448:	d03a      	beq.n	80004c0 <HAL_GPIO_Init+0x180>
 800044a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800044e:	42a8      	cmp	r0, r5
 8000450:	d038      	beq.n	80004c4 <HAL_GPIO_Init+0x184>
 8000452:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000456:	42a8      	cmp	r0, r5
 8000458:	d036      	beq.n	80004c8 <HAL_GPIO_Init+0x188>
 800045a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800045e:	42a8      	cmp	r0, r5
 8000460:	d034      	beq.n	80004cc <HAL_GPIO_Init+0x18c>
 8000462:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000466:	42a8      	cmp	r0, r5
 8000468:	d032      	beq.n	80004d0 <HAL_GPIO_Init+0x190>
 800046a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800046e:	42a8      	cmp	r0, r5
 8000470:	bf14      	ite	ne
 8000472:	2507      	movne	r5, #7
 8000474:	2506      	moveq	r5, #6
 8000476:	fa05 f50c 	lsl.w	r5, r5, ip
 800047a:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 800047e:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000480:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000482:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000484:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000488:	bf0c      	ite	eq
 800048a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800048c:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 800048e:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000490:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000492:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000496:	bf0c      	ite	eq
 8000498:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800049a:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 800049c:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800049e:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004a0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80004a4:	bf0c      	ite	eq
 80004a6:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80004a8:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 80004aa:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80004ac:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004ae:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80004b0:	bf54      	ite	pl
 80004b2:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80004b4:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 80004b6:	60d5      	str	r5, [r2, #12]
    position++;
 80004b8:	3301      	adds	r3, #1
 80004ba:	e749      	b.n	8000350 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80004bc:	2500      	movs	r5, #0
 80004be:	e7da      	b.n	8000476 <HAL_GPIO_Init+0x136>
 80004c0:	2501      	movs	r5, #1
 80004c2:	e7d8      	b.n	8000476 <HAL_GPIO_Init+0x136>
 80004c4:	2502      	movs	r5, #2
 80004c6:	e7d6      	b.n	8000476 <HAL_GPIO_Init+0x136>
 80004c8:	2503      	movs	r5, #3
 80004ca:	e7d4      	b.n	8000476 <HAL_GPIO_Init+0x136>
 80004cc:	2504      	movs	r5, #4
 80004ce:	e7d2      	b.n	8000476 <HAL_GPIO_Init+0x136>
 80004d0:	2505      	movs	r5, #5
 80004d2:	e7d0      	b.n	8000476 <HAL_GPIO_Init+0x136>
 80004d4:	40010400 	.word	0x40010400
 80004d8:	48000400 	.word	0x48000400
 80004dc:	40021000 	.word	0x40021000

080004e0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80004e0:	6903      	ldr	r3, [r0, #16]
 80004e2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80004e4:	bf14      	ite	ne
 80004e6:	2001      	movne	r0, #1
 80004e8:	2000      	moveq	r0, #0
 80004ea:	4770      	bx	lr

080004ec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80004ec:	b10a      	cbz	r2, 80004f2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004ee:	6181      	str	r1, [r0, #24]
 80004f0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004f2:	6281      	str	r1, [r0, #40]	; 0x28
 80004f4:	4770      	bx	lr
	...

080004f8 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004f8:	6803      	ldr	r3, [r0, #0]
{
 80004fa:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004fe:	07df      	lsls	r7, r3, #31
{
 8000500:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000502:	d411      	bmi.n	8000528 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000504:	682b      	ldr	r3, [r5, #0]
 8000506:	079e      	lsls	r6, r3, #30
 8000508:	f100 808b 	bmi.w	8000622 <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800050c:	682b      	ldr	r3, [r5, #0]
 800050e:	071c      	lsls	r4, r3, #28
 8000510:	f100 80fe 	bmi.w	8000710 <HAL_RCC_OscConfig+0x218>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000514:	682b      	ldr	r3, [r5, #0]
 8000516:	0758      	lsls	r0, r3, #29
 8000518:	f100 8147 	bmi.w	80007aa <HAL_RCC_OscConfig+0x2b2>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800051c:	69aa      	ldr	r2, [r5, #24]
 800051e:	2a00      	cmp	r2, #0
 8000520:	f040 81dd 	bne.w	80008de <HAL_RCC_OscConfig+0x3e6>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000524:	2000      	movs	r0, #0
 8000526:	e024      	b.n	8000572 <HAL_RCC_OscConfig+0x7a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000528:	4cbd      	ldr	r4, [pc, #756]	; (8000820 <HAL_RCC_OscConfig+0x328>)
 800052a:	6863      	ldr	r3, [r4, #4]
 800052c:	f003 030c 	and.w	r3, r3, #12
 8000530:	2b04      	cmp	r3, #4
 8000532:	d00a      	beq.n	800054a <HAL_RCC_OscConfig+0x52>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000534:	6863      	ldr	r3, [r4, #4]
 8000536:	f003 030c 	and.w	r3, r3, #12
 800053a:	2b08      	cmp	r3, #8
 800053c:	d11c      	bne.n	8000578 <HAL_RCC_OscConfig+0x80>
 800053e:	6863      	ldr	r3, [r4, #4]
 8000540:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000548:	d116      	bne.n	8000578 <HAL_RCC_OscConfig+0x80>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800054a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800054e:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000552:	6821      	ldr	r1, [r4, #0]
 8000554:	fa93 f3a3 	rbit	r3, r3
 8000558:	fab3 f383 	clz	r3, r3
 800055c:	f003 031f 	and.w	r3, r3, #31
 8000560:	2201      	movs	r2, #1
 8000562:	fa02 f303 	lsl.w	r3, r2, r3
 8000566:	420b      	tst	r3, r1
 8000568:	d0cc      	beq.n	8000504 <HAL_RCC_OscConfig+0xc>
 800056a:	686b      	ldr	r3, [r5, #4]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d1c9      	bne.n	8000504 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000570:	2001      	movs	r0, #1
}
 8000572:	b002      	add	sp, #8
 8000574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000578:	686b      	ldr	r3, [r5, #4]
 800057a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800057e:	d11e      	bne.n	80005be <HAL_RCC_OscConfig+0xc6>
 8000580:	6823      	ldr	r3, [r4, #0]
 8000582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000586:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000588:	f7ff fe66 	bl	8000258 <HAL_GetTick>
 800058c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000590:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000592:	2701      	movs	r7, #1
 8000594:	fa96 f3a6 	rbit	r3, r6
 8000598:	6822      	ldr	r2, [r4, #0]
 800059a:	fa96 f3a6 	rbit	r3, r6
 800059e:	fab3 f383 	clz	r3, r3
 80005a2:	f003 031f 	and.w	r3, r3, #31
 80005a6:	fa07 f303 	lsl.w	r3, r7, r3
 80005aa:	4213      	tst	r3, r2
 80005ac:	d1aa      	bne.n	8000504 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005ae:	f7ff fe53 	bl	8000258 <HAL_GetTick>
 80005b2:	eba0 0008 	sub.w	r0, r0, r8
 80005b6:	2864      	cmp	r0, #100	; 0x64
 80005b8:	d9ec      	bls.n	8000594 <HAL_RCC_OscConfig+0x9c>
            return HAL_TIMEOUT;
 80005ba:	2003      	movs	r0, #3
 80005bc:	e7d9      	b.n	8000572 <HAL_RCC_OscConfig+0x7a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005be:	bb0b      	cbnz	r3, 8000604 <HAL_RCC_OscConfig+0x10c>
 80005c0:	6823      	ldr	r3, [r4, #0]
 80005c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005c6:	6023      	str	r3, [r4, #0]
 80005c8:	6823      	ldr	r3, [r4, #0]
 80005ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005ce:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005d0:	f7ff fe42 	bl	8000258 <HAL_GetTick>
 80005d4:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80005d8:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005da:	2701      	movs	r7, #1
 80005dc:	fa96 f3a6 	rbit	r3, r6
 80005e0:	6822      	ldr	r2, [r4, #0]
 80005e2:	fa96 f3a6 	rbit	r3, r6
 80005e6:	fab3 f383 	clz	r3, r3
 80005ea:	f003 031f 	and.w	r3, r3, #31
 80005ee:	fa07 f303 	lsl.w	r3, r7, r3
 80005f2:	4213      	tst	r3, r2
 80005f4:	d086      	beq.n	8000504 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005f6:	f7ff fe2f 	bl	8000258 <HAL_GetTick>
 80005fa:	eba0 0008 	sub.w	r0, r0, r8
 80005fe:	2864      	cmp	r0, #100	; 0x64
 8000600:	d9ec      	bls.n	80005dc <HAL_RCC_OscConfig+0xe4>
 8000602:	e7da      	b.n	80005ba <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000608:	6823      	ldr	r3, [r4, #0]
 800060a:	d103      	bne.n	8000614 <HAL_RCC_OscConfig+0x11c>
 800060c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000610:	6023      	str	r3, [r4, #0]
 8000612:	e7b5      	b.n	8000580 <HAL_RCC_OscConfig+0x88>
 8000614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000618:	6023      	str	r3, [r4, #0]
 800061a:	6823      	ldr	r3, [r4, #0]
 800061c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000620:	e7b1      	b.n	8000586 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000622:	4c7f      	ldr	r4, [pc, #508]	; (8000820 <HAL_RCC_OscConfig+0x328>)
 8000624:	6863      	ldr	r3, [r4, #4]
 8000626:	f013 0f0c 	tst.w	r3, #12
 800062a:	d00a      	beq.n	8000642 <HAL_RCC_OscConfig+0x14a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800062c:	6863      	ldr	r3, [r4, #4]
 800062e:	f003 030c 	and.w	r3, r3, #12
 8000632:	2b08      	cmp	r3, #8
 8000634:	d124      	bne.n	8000680 <HAL_RCC_OscConfig+0x188>
 8000636:	6863      	ldr	r3, [r4, #4]
 8000638:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800063c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000640:	d11e      	bne.n	8000680 <HAL_RCC_OscConfig+0x188>
 8000642:	2302      	movs	r3, #2
 8000644:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000648:	6821      	ldr	r1, [r4, #0]
 800064a:	fa93 f3a3 	rbit	r3, r3
 800064e:	fab3 f383 	clz	r3, r3
 8000652:	f003 031f 	and.w	r3, r3, #31
 8000656:	2201      	movs	r2, #1
 8000658:	fa02 f303 	lsl.w	r3, r2, r3
 800065c:	420b      	tst	r3, r1
 800065e:	d002      	beq.n	8000666 <HAL_RCC_OscConfig+0x16e>
 8000660:	68eb      	ldr	r3, [r5, #12]
 8000662:	4293      	cmp	r3, r2
 8000664:	d184      	bne.n	8000570 <HAL_RCC_OscConfig+0x78>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000666:	6821      	ldr	r1, [r4, #0]
 8000668:	23f8      	movs	r3, #248	; 0xf8
 800066a:	fa93 f3a3 	rbit	r3, r3
 800066e:	fab3 f283 	clz	r2, r3
 8000672:	692b      	ldr	r3, [r5, #16]
 8000674:	4093      	lsls	r3, r2
 8000676:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 800067a:	4313      	orrs	r3, r2
 800067c:	6023      	str	r3, [r4, #0]
 800067e:	e745      	b.n	800050c <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000680:	68ea      	ldr	r2, [r5, #12]
 8000682:	2601      	movs	r6, #1
 8000684:	b30a      	cbz	r2, 80006ca <HAL_RCC_OscConfig+0x1d2>
 8000686:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 800068a:	fab3 f383 	clz	r3, r3
 800068e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000692:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	2702      	movs	r7, #2
 800069a:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800069c:	f7ff fddc 	bl	8000258 <HAL_GetTick>
 80006a0:	4680      	mov	r8, r0
 80006a2:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006a6:	6822      	ldr	r2, [r4, #0]
 80006a8:	fa97 f3a7 	rbit	r3, r7
 80006ac:	fab3 f383 	clz	r3, r3
 80006b0:	f003 031f 	and.w	r3, r3, #31
 80006b4:	fa06 f303 	lsl.w	r3, r6, r3
 80006b8:	4213      	tst	r3, r2
 80006ba:	d1d4      	bne.n	8000666 <HAL_RCC_OscConfig+0x16e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006bc:	f7ff fdcc 	bl	8000258 <HAL_GetTick>
 80006c0:	eba0 0008 	sub.w	r0, r0, r8
 80006c4:	2802      	cmp	r0, #2
 80006c6:	d9ec      	bls.n	80006a2 <HAL_RCC_OscConfig+0x1aa>
 80006c8:	e777      	b.n	80005ba <HAL_RCC_OscConfig+0xc2>
 80006ca:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 80006ce:	fab3 f383 	clz	r3, r3
 80006d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80006d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	2702      	movs	r7, #2
 80006de:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006e0:	f7ff fdba 	bl	8000258 <HAL_GetTick>
 80006e4:	4680      	mov	r8, r0
 80006e6:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006ea:	6822      	ldr	r2, [r4, #0]
 80006ec:	fa97 f3a7 	rbit	r3, r7
 80006f0:	fab3 f383 	clz	r3, r3
 80006f4:	f003 031f 	and.w	r3, r3, #31
 80006f8:	fa06 f303 	lsl.w	r3, r6, r3
 80006fc:	4213      	tst	r3, r2
 80006fe:	f43f af05 	beq.w	800050c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000702:	f7ff fda9 	bl	8000258 <HAL_GetTick>
 8000706:	eba0 0008 	sub.w	r0, r0, r8
 800070a:	2802      	cmp	r0, #2
 800070c:	d9eb      	bls.n	80006e6 <HAL_RCC_OscConfig+0x1ee>
 800070e:	e754      	b.n	80005ba <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000710:	696a      	ldr	r2, [r5, #20]
 8000712:	4e43      	ldr	r6, [pc, #268]	; (8000820 <HAL_RCC_OscConfig+0x328>)
 8000714:	4943      	ldr	r1, [pc, #268]	; (8000824 <HAL_RCC_OscConfig+0x32c>)
 8000716:	2401      	movs	r4, #1
 8000718:	b31a      	cbz	r2, 8000762 <HAL_RCC_OscConfig+0x26a>
 800071a:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 800071e:	fab3 f383 	clz	r3, r3
 8000722:	440b      	add	r3, r1
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	2702      	movs	r7, #2
 8000728:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 800072a:	f7ff fd95 	bl	8000258 <HAL_GetTick>
 800072e:	4680      	mov	r8, r0
 8000730:	fa97 f3a7 	rbit	r3, r7
 8000734:	fa97 f3a7 	rbit	r3, r7
 8000738:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800073c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800073e:	fa97 f3a7 	rbit	r3, r7
 8000742:	fab3 f383 	clz	r3, r3
 8000746:	f003 031f 	and.w	r3, r3, #31
 800074a:	fa04 f303 	lsl.w	r3, r4, r3
 800074e:	4213      	tst	r3, r2
 8000750:	f47f aee0 	bne.w	8000514 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000754:	f7ff fd80 	bl	8000258 <HAL_GetTick>
 8000758:	eba0 0008 	sub.w	r0, r0, r8
 800075c:	2802      	cmp	r0, #2
 800075e:	d9e7      	bls.n	8000730 <HAL_RCC_OscConfig+0x238>
 8000760:	e72b      	b.n	80005ba <HAL_RCC_OscConfig+0xc2>
 8000762:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8000766:	fab3 f383 	clz	r3, r3
 800076a:	440b      	add	r3, r1
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	2702      	movs	r7, #2
 8000770:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000772:	f7ff fd71 	bl	8000258 <HAL_GetTick>
 8000776:	4680      	mov	r8, r0
 8000778:	fa97 f3a7 	rbit	r3, r7
 800077c:	fa97 f3a7 	rbit	r3, r7
 8000780:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000784:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000786:	fa97 f3a7 	rbit	r3, r7
 800078a:	fab3 f383 	clz	r3, r3
 800078e:	f003 031f 	and.w	r3, r3, #31
 8000792:	fa04 f303 	lsl.w	r3, r4, r3
 8000796:	4213      	tst	r3, r2
 8000798:	f43f aebc 	beq.w	8000514 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800079c:	f7ff fd5c 	bl	8000258 <HAL_GetTick>
 80007a0:	eba0 0008 	sub.w	r0, r0, r8
 80007a4:	2802      	cmp	r0, #2
 80007a6:	d9e7      	bls.n	8000778 <HAL_RCC_OscConfig+0x280>
 80007a8:	e707      	b.n	80005ba <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007aa:	4c1d      	ldr	r4, [pc, #116]	; (8000820 <HAL_RCC_OscConfig+0x328>)
 80007ac:	69e3      	ldr	r3, [r4, #28]
 80007ae:	00d9      	lsls	r1, r3, #3
 80007b0:	d434      	bmi.n	800081c <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_PWR_CLK_ENABLE();
 80007b2:	69e3      	ldr	r3, [r4, #28]
 80007b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b8:	61e3      	str	r3, [r4, #28]
 80007ba:	69e3      	ldr	r3, [r4, #28]
 80007bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c0:	9301      	str	r3, [sp, #4]
 80007c2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80007c4:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007c6:	4f18      	ldr	r7, [pc, #96]	; (8000828 <HAL_RCC_OscConfig+0x330>)
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	05da      	lsls	r2, r3, #23
 80007cc:	d52e      	bpl.n	800082c <HAL_RCC_OscConfig+0x334>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007ce:	68ab      	ldr	r3, [r5, #8]
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d13c      	bne.n	800084e <HAL_RCC_OscConfig+0x356>
 80007d4:	6a23      	ldr	r3, [r4, #32]
 80007d6:	f043 0301 	orr.w	r3, r3, #1
 80007da:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80007dc:	f7ff fd3c 	bl	8000258 <HAL_GetTick>
 80007e0:	2702      	movs	r7, #2
 80007e2:	4682      	mov	sl, r0
 80007e4:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007e6:	f04f 0801 	mov.w	r8, #1
 80007ea:	fa97 f3a7 	rbit	r3, r7
 80007ee:	fa97 f3a7 	rbit	r3, r7
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d06b      	beq.n	80008ce <HAL_RCC_OscConfig+0x3d6>
 80007f6:	6a22      	ldr	r2, [r4, #32]
 80007f8:	fa99 f3a9 	rbit	r3, r9
 80007fc:	fab3 f383 	clz	r3, r3
 8000800:	f003 031f 	and.w	r3, r3, #31
 8000804:	fa08 f303 	lsl.w	r3, r8, r3
 8000808:	4213      	tst	r3, r2
 800080a:	d057      	beq.n	80008bc <HAL_RCC_OscConfig+0x3c4>
    if(pwrclkchanged == SET)
 800080c:	2e00      	cmp	r6, #0
 800080e:	f43f ae85 	beq.w	800051c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000812:	69e3      	ldr	r3, [r4, #28]
 8000814:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000818:	61e3      	str	r3, [r4, #28]
 800081a:	e67f      	b.n	800051c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800081c:	2600      	movs	r6, #0
 800081e:	e7d2      	b.n	80007c6 <HAL_RCC_OscConfig+0x2ce>
 8000820:	40021000 	.word	0x40021000
 8000824:	10908120 	.word	0x10908120
 8000828:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000832:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000834:	f7ff fd10 	bl	8000258 <HAL_GetTick>
 8000838:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	05db      	lsls	r3, r3, #23
 800083e:	d4c6      	bmi.n	80007ce <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000840:	f7ff fd0a 	bl	8000258 <HAL_GetTick>
 8000844:	eba0 0008 	sub.w	r0, r0, r8
 8000848:	2864      	cmp	r0, #100	; 0x64
 800084a:	d9f6      	bls.n	800083a <HAL_RCC_OscConfig+0x342>
 800084c:	e6b5      	b.n	80005ba <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800084e:	bb3b      	cbnz	r3, 80008a0 <HAL_RCC_OscConfig+0x3a8>
 8000850:	6a23      	ldr	r3, [r4, #32]
 8000852:	f023 0301 	bic.w	r3, r3, #1
 8000856:	6223      	str	r3, [r4, #32]
 8000858:	6a23      	ldr	r3, [r4, #32]
 800085a:	f023 0304 	bic.w	r3, r3, #4
 800085e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000860:	f7ff fcfa 	bl	8000258 <HAL_GetTick>
 8000864:	2702      	movs	r7, #2
 8000866:	4682      	mov	sl, r0
 8000868:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800086a:	f04f 0801 	mov.w	r8, #1
 800086e:	fa97 f3a7 	rbit	r3, r7
 8000872:	fa97 f3a7 	rbit	r3, r7
 8000876:	b373      	cbz	r3, 80008d6 <HAL_RCC_OscConfig+0x3de>
 8000878:	6a22      	ldr	r2, [r4, #32]
 800087a:	fa99 f3a9 	rbit	r3, r9
 800087e:	fab3 f383 	clz	r3, r3
 8000882:	f003 031f 	and.w	r3, r3, #31
 8000886:	fa08 f303 	lsl.w	r3, r8, r3
 800088a:	4213      	tst	r3, r2
 800088c:	d0be      	beq.n	800080c <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800088e:	f7ff fce3 	bl	8000258 <HAL_GetTick>
 8000892:	f241 3388 	movw	r3, #5000	; 0x1388
 8000896:	eba0 000a 	sub.w	r0, r0, sl
 800089a:	4298      	cmp	r0, r3
 800089c:	d9e7      	bls.n	800086e <HAL_RCC_OscConfig+0x376>
 800089e:	e68c      	b.n	80005ba <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008a0:	2b05      	cmp	r3, #5
 80008a2:	6a23      	ldr	r3, [r4, #32]
 80008a4:	d103      	bne.n	80008ae <HAL_RCC_OscConfig+0x3b6>
 80008a6:	f043 0304 	orr.w	r3, r3, #4
 80008aa:	6223      	str	r3, [r4, #32]
 80008ac:	e792      	b.n	80007d4 <HAL_RCC_OscConfig+0x2dc>
 80008ae:	f023 0301 	bic.w	r3, r3, #1
 80008b2:	6223      	str	r3, [r4, #32]
 80008b4:	6a23      	ldr	r3, [r4, #32]
 80008b6:	f023 0304 	bic.w	r3, r3, #4
 80008ba:	e78e      	b.n	80007da <HAL_RCC_OscConfig+0x2e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008bc:	f7ff fccc 	bl	8000258 <HAL_GetTick>
 80008c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80008c4:	eba0 000a 	sub.w	r0, r0, sl
 80008c8:	4298      	cmp	r0, r3
 80008ca:	d98e      	bls.n	80007ea <HAL_RCC_OscConfig+0x2f2>
 80008cc:	e675      	b.n	80005ba <HAL_RCC_OscConfig+0xc2>
 80008ce:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80008d4:	e790      	b.n	80007f8 <HAL_RCC_OscConfig+0x300>
 80008d6:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008da:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80008dc:	e7cd      	b.n	800087a <HAL_RCC_OscConfig+0x382>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80008de:	4c44      	ldr	r4, [pc, #272]	; (80009f0 <HAL_RCC_OscConfig+0x4f8>)
 80008e0:	6863      	ldr	r3, [r4, #4]
 80008e2:	f003 030c 	and.w	r3, r3, #12
 80008e6:	2b08      	cmp	r3, #8
 80008e8:	f43f ae42 	beq.w	8000570 <HAL_RCC_OscConfig+0x78>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80008ec:	2a02      	cmp	r2, #2
 80008ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008f2:	d158      	bne.n	80009a6 <HAL_RCC_OscConfig+0x4ae>
 80008f4:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80008f8:	fab3 f383 	clz	r3, r3
 80008fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000900:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800090a:	f7ff fca5 	bl	8000258 <HAL_GetTick>
 800090e:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8000912:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000914:	2601      	movs	r6, #1
 8000916:	fa97 f3a7 	rbit	r3, r7
 800091a:	6822      	ldr	r2, [r4, #0]
 800091c:	fa97 f3a7 	rbit	r3, r7
 8000920:	fab3 f383 	clz	r3, r3
 8000924:	f003 031f 	and.w	r3, r3, #31
 8000928:	fa06 f303 	lsl.w	r3, r6, r3
 800092c:	4213      	tst	r3, r2
 800092e:	d133      	bne.n	8000998 <HAL_RCC_OscConfig+0x4a0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000930:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000932:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000934:	f023 030f 	bic.w	r3, r3, #15
 8000938:	4313      	orrs	r3, r2
 800093a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800093c:	6862      	ldr	r2, [r4, #4]
 800093e:	6a2b      	ldr	r3, [r5, #32]
 8000940:	69e9      	ldr	r1, [r5, #28]
 8000942:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8000946:	430b      	orrs	r3, r1
 8000948:	4313      	orrs	r3, r2
 800094a:	6063      	str	r3, [r4, #4]
 800094c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000950:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000954:	fab3 f383 	clz	r3, r3
 8000958:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800095c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000966:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000968:	f7ff fc76 	bl	8000258 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800096c:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 800096e:	4607      	mov	r7, r0
 8000970:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000974:	6822      	ldr	r2, [r4, #0]
 8000976:	fa95 f3a5 	rbit	r3, r5
 800097a:	fab3 f383 	clz	r3, r3
 800097e:	f003 031f 	and.w	r3, r3, #31
 8000982:	fa06 f303 	lsl.w	r3, r6, r3
 8000986:	4213      	tst	r3, r2
 8000988:	f47f adcc 	bne.w	8000524 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800098c:	f7ff fc64 	bl	8000258 <HAL_GetTick>
 8000990:	1bc0      	subs	r0, r0, r7
 8000992:	2802      	cmp	r0, #2
 8000994:	d9ec      	bls.n	8000970 <HAL_RCC_OscConfig+0x478>
 8000996:	e610      	b.n	80005ba <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000998:	f7ff fc5e 	bl	8000258 <HAL_GetTick>
 800099c:	eba0 0008 	sub.w	r0, r0, r8
 80009a0:	2802      	cmp	r0, #2
 80009a2:	d9b8      	bls.n	8000916 <HAL_RCC_OscConfig+0x41e>
 80009a4:	e609      	b.n	80005ba <HAL_RCC_OscConfig+0xc2>
 80009a6:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80009aa:	fab3 f383 	clz	r3, r3
 80009ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80009b2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009bc:	f7ff fc4c 	bl	8000258 <HAL_GetTick>
 80009c0:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80009c4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009c6:	2601      	movs	r6, #1
 80009c8:	fa95 f3a5 	rbit	r3, r5
 80009cc:	6822      	ldr	r2, [r4, #0]
 80009ce:	fa95 f3a5 	rbit	r3, r5
 80009d2:	fab3 f383 	clz	r3, r3
 80009d6:	f003 031f 	and.w	r3, r3, #31
 80009da:	fa06 f303 	lsl.w	r3, r6, r3
 80009de:	4213      	tst	r3, r2
 80009e0:	f43f ada0 	beq.w	8000524 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009e4:	f7ff fc38 	bl	8000258 <HAL_GetTick>
 80009e8:	1bc0      	subs	r0, r0, r7
 80009ea:	2802      	cmp	r0, #2
 80009ec:	d9ec      	bls.n	80009c8 <HAL_RCC_OscConfig+0x4d0>
 80009ee:	e5e4      	b.n	80005ba <HAL_RCC_OscConfig+0xc2>
 80009f0:	40021000 	.word	0x40021000

080009f4 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80009f4:	4911      	ldr	r1, [pc, #68]	; (8000a3c <HAL_RCC_GetSysClockFreq+0x48>)
 80009f6:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80009f8:	f003 020c 	and.w	r2, r3, #12
 80009fc:	2a08      	cmp	r2, #8
 80009fe:	d11a      	bne.n	8000a36 <HAL_RCC_GetSysClockFreq+0x42>
 8000a00:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000a04:	fa92 f2a2 	rbit	r2, r2
 8000a08:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000a0a:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000a0e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8000a10:	fa90 f0a0 	rbit	r0, r0
 8000a14:	fab0 f080 	clz	r0, r0
 8000a18:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000a1c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000a20:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000a22:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000a24:	4a06      	ldr	r2, [pc, #24]	; (8000a40 <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000a26:	4807      	ldr	r0, [pc, #28]	; (8000a44 <HAL_RCC_GetSysClockFreq+0x50>)
 8000a28:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000a2a:	4807      	ldr	r0, [pc, #28]	; (8000a48 <HAL_RCC_GetSysClockFreq+0x54>)
 8000a2c:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000a30:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000a32:	4348      	muls	r0, r1
 8000a34:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8000a36:	4804      	ldr	r0, [pc, #16]	; (8000a48 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	08000f8c 	.word	0x08000f8c
 8000a44:	08000f9c 	.word	0x08000f9c
 8000a48:	007a1200 	.word	0x007a1200

08000a4c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a4c:	4a5c      	ldr	r2, [pc, #368]	; (8000bc0 <HAL_RCC_ClockConfig+0x174>)
 8000a4e:	6813      	ldr	r3, [r2, #0]
 8000a50:	f003 0307 	and.w	r3, r3, #7
 8000a54:	428b      	cmp	r3, r1
{
 8000a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a5a:	4606      	mov	r6, r0
 8000a5c:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a5e:	d330      	bcc.n	8000ac2 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a60:	6832      	ldr	r2, [r6, #0]
 8000a62:	0791      	lsls	r1, r2, #30
 8000a64:	d43a      	bmi.n	8000adc <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a66:	07d2      	lsls	r2, r2, #31
 8000a68:	d440      	bmi.n	8000aec <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a6a:	4a55      	ldr	r2, [pc, #340]	; (8000bc0 <HAL_RCC_ClockConfig+0x174>)
 8000a6c:	6813      	ldr	r3, [r2, #0]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	429d      	cmp	r5, r3
 8000a74:	f0c0 8092 	bcc.w	8000b9c <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a78:	6832      	ldr	r2, [r6, #0]
 8000a7a:	4c52      	ldr	r4, [pc, #328]	; (8000bc4 <HAL_RCC_ClockConfig+0x178>)
 8000a7c:	f012 0f04 	tst.w	r2, #4
 8000a80:	f040 8097 	bne.w	8000bb2 <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a84:	0713      	lsls	r3, r2, #28
 8000a86:	d506      	bpl.n	8000a96 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000a88:	6863      	ldr	r3, [r4, #4]
 8000a8a:	6932      	ldr	r2, [r6, #16]
 8000a8c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000a90:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a94:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000a96:	f7ff ffad 	bl	80009f4 <HAL_RCC_GetSysClockFreq>
 8000a9a:	6863      	ldr	r3, [r4, #4]
 8000a9c:	22f0      	movs	r2, #240	; 0xf0
 8000a9e:	fa92 f2a2 	rbit	r2, r2
 8000aa2:	fab2 f282 	clz	r2, r2
 8000aa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000aaa:	40d3      	lsrs	r3, r2
 8000aac:	4a46      	ldr	r2, [pc, #280]	; (8000bc8 <HAL_RCC_ClockConfig+0x17c>)
 8000aae:	5cd3      	ldrb	r3, [r2, r3]
 8000ab0:	40d8      	lsrs	r0, r3
 8000ab2:	4b46      	ldr	r3, [pc, #280]	; (8000bcc <HAL_RCC_ClockConfig+0x180>)
 8000ab4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f7ff fb8c 	bl	80001d4 <HAL_InitTick>
  return HAL_OK;
 8000abc:	2000      	movs	r0, #0
}
 8000abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ac2:	6813      	ldr	r3, [r2, #0]
 8000ac4:	f023 0307 	bic.w	r3, r3, #7
 8000ac8:	430b      	orrs	r3, r1
 8000aca:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000acc:	6813      	ldr	r3, [r2, #0]
 8000ace:	f003 0307 	and.w	r3, r3, #7
 8000ad2:	4299      	cmp	r1, r3
 8000ad4:	d0c4      	beq.n	8000a60 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000adc:	4939      	ldr	r1, [pc, #228]	; (8000bc4 <HAL_RCC_ClockConfig+0x178>)
 8000ade:	68b0      	ldr	r0, [r6, #8]
 8000ae0:	684b      	ldr	r3, [r1, #4]
 8000ae2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ae6:	4303      	orrs	r3, r0
 8000ae8:	604b      	str	r3, [r1, #4]
 8000aea:	e7bc      	b.n	8000a66 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000aec:	6872      	ldr	r2, [r6, #4]
 8000aee:	4c35      	ldr	r4, [pc, #212]	; (8000bc4 <HAL_RCC_ClockConfig+0x178>)
 8000af0:	2a01      	cmp	r2, #1
 8000af2:	d128      	bne.n	8000b46 <HAL_RCC_ClockConfig+0xfa>
 8000af4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000af8:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000afc:	6821      	ldr	r1, [r4, #0]
 8000afe:	fa93 f3a3 	rbit	r3, r3
 8000b02:	fab3 f383 	clz	r3, r3
 8000b06:	f003 031f 	and.w	r3, r3, #31
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b10:	d0e1      	beq.n	8000ad6 <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b12:	6863      	ldr	r3, [r4, #4]
 8000b14:	f023 0303 	bic.w	r3, r3, #3
 8000b18:	431a      	orrs	r2, r3
 8000b1a:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8000b1c:	f7ff fb9c 	bl	8000258 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b20:	6873      	ldr	r3, [r6, #4]
 8000b22:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8000b24:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b26:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b2a:	d11f      	bne.n	8000b6c <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b2c:	6863      	ldr	r3, [r4, #4]
 8000b2e:	f003 030c 	and.w	r3, r3, #12
 8000b32:	2b04      	cmp	r3, #4
 8000b34:	d099      	beq.n	8000a6a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b36:	f7ff fb8f 	bl	8000258 <HAL_GetTick>
 8000b3a:	1bc0      	subs	r0, r0, r7
 8000b3c:	4540      	cmp	r0, r8
 8000b3e:	d9f5      	bls.n	8000b2c <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8000b40:	2003      	movs	r0, #3
 8000b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b46:	2a02      	cmp	r2, #2
 8000b48:	bf0c      	ite	eq
 8000b4a:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000b4e:	2302      	movne	r3, #2
 8000b50:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b54:	6820      	ldr	r0, [r4, #0]
 8000b56:	fa93 f3a3 	rbit	r3, r3
 8000b5a:	fab3 f383 	clz	r3, r3
 8000b5e:	f003 031f 	and.w	r3, r3, #31
 8000b62:	2101      	movs	r1, #1
 8000b64:	fa01 f303 	lsl.w	r3, r1, r3
 8000b68:	4203      	tst	r3, r0
 8000b6a:	e7d1      	b.n	8000b10 <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d110      	bne.n	8000b92 <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b70:	6863      	ldr	r3, [r4, #4]
 8000b72:	f003 030c 	and.w	r3, r3, #12
 8000b76:	2b08      	cmp	r3, #8
 8000b78:	f43f af77 	beq.w	8000a6a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b7c:	f7ff fb6c 	bl	8000258 <HAL_GetTick>
 8000b80:	1bc0      	subs	r0, r0, r7
 8000b82:	4540      	cmp	r0, r8
 8000b84:	d9f4      	bls.n	8000b70 <HAL_RCC_ClockConfig+0x124>
 8000b86:	e7db      	b.n	8000b40 <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b88:	f7ff fb66 	bl	8000258 <HAL_GetTick>
 8000b8c:	1bc0      	subs	r0, r0, r7
 8000b8e:	4540      	cmp	r0, r8
 8000b90:	d8d6      	bhi.n	8000b40 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b92:	6863      	ldr	r3, [r4, #4]
 8000b94:	f013 0f0c 	tst.w	r3, #12
 8000b98:	d1f6      	bne.n	8000b88 <HAL_RCC_ClockConfig+0x13c>
 8000b9a:	e766      	b.n	8000a6a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b9c:	6813      	ldr	r3, [r2, #0]
 8000b9e:	f023 0307 	bic.w	r3, r3, #7
 8000ba2:	432b      	orrs	r3, r5
 8000ba4:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ba6:	6813      	ldr	r3, [r2, #0]
 8000ba8:	f003 0307 	and.w	r3, r3, #7
 8000bac:	429d      	cmp	r5, r3
 8000bae:	d192      	bne.n	8000ad6 <HAL_RCC_ClockConfig+0x8a>
 8000bb0:	e762      	b.n	8000a78 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000bb2:	6863      	ldr	r3, [r4, #4]
 8000bb4:	68f1      	ldr	r1, [r6, #12]
 8000bb6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000bba:	430b      	orrs	r3, r1
 8000bbc:	6063      	str	r3, [r4, #4]
 8000bbe:	e761      	b.n	8000a84 <HAL_RCC_ClockConfig+0x38>
 8000bc0:	40022000 	.word	0x40022000
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	08000fac 	.word	0x08000fac
 8000bcc:	20000008 	.word	0x20000008

08000bd0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000bd0:	4b01      	ldr	r3, [pc, #4]	; (8000bd8 <HAL_RCC_GetHCLKFreq+0x8>)
 8000bd2:	6818      	ldr	r0, [r3, #0]
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	20000008 	.word	0x20000008

08000bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bdc:	b510      	push	{r4, lr}
 8000bde:	b090      	sub	sp, #64	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000be0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000be4:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000be6:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000be8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bec:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bee:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bf0:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf2:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000bf4:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bf6:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bf8:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bfa:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000bfc:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bfe:	f7ff fc7b 	bl	80004f8 <HAL_RCC_OscConfig>
 8000c02:	b100      	cbz	r0, 8000c06 <SystemClock_Config+0x2a>
 8000c04:	e7fe      	b.n	8000c04 <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c06:	230f      	movs	r3, #15
 8000c08:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c0a:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c10:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c12:	4621      	mov	r1, r4
 8000c14:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c16:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c18:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c1a:	f7ff ff17 	bl	8000a4c <HAL_RCC_ClockConfig>
 8000c1e:	4604      	mov	r4, r0
 8000c20:	b100      	cbz	r0, 8000c24 <SystemClock_Config+0x48>
 8000c22:	e7fe      	b.n	8000c22 <SystemClock_Config+0x46>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000c24:	f7ff ffd4 	bl	8000bd0 <HAL_RCC_GetHCLKFreq>
 8000c28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c2c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c30:	f7ff fb5e 	bl	80002f0 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000c34:	2004      	movs	r0, #4
 8000c36:	f7ff fb71 	bl	800031c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000c3a:	4622      	mov	r2, r4
 8000c3c:	4621      	mov	r1, r4
 8000c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8000c42:	f7ff fb21 	bl	8000288 <HAL_NVIC_SetPriority>
}
 8000c46:	b010      	add	sp, #64	; 0x40
 8000c48:	bd10      	pop	{r4, pc}
	...

08000c4c <main>:
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 8000c50:	f7ff fae4 	bl	800021c <HAL_Init>
  SystemClock_Config();
 8000c54:	f7ff ffc2 	bl	8000bdc <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c58:	4b5a      	ldr	r3, [pc, #360]	; (8000dc4 <main+0x178>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, y1_Pin|y2_Pin, GPIO_PIN_RESET);
 8000c5a:	485b      	ldr	r0, [pc, #364]	; (8000dc8 <main+0x17c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5c:	695a      	ldr	r2, [r3, #20]
 8000c5e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000c62:	615a      	str	r2, [r3, #20]
 8000c64:	695a      	ldr	r2, [r3, #20]
 8000c66:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8000c6a:	9200      	str	r2, [sp, #0]
 8000c6c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c6e:	695a      	ldr	r2, [r3, #20]
 8000c70:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000c74:	615a      	str	r2, [r3, #20]
 8000c76:	695a      	ldr	r2, [r3, #20]
 8000c78:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000c7c:	9201      	str	r2, [sp, #4]
 8000c7e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c80:	695a      	ldr	r2, [r3, #20]
 8000c82:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000c86:	615a      	str	r2, [r3, #20]
 8000c88:	695a      	ldr	r2, [r3, #20]
 8000c8a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000c8e:	9202      	str	r2, [sp, #8]
 8000c90:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c92:	695a      	ldr	r2, [r3, #20]
 8000c94:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000c98:	615a      	str	r2, [r3, #20]
 8000c9a:	695a      	ldr	r2, [r3, #20]
 8000c9c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000ca0:	9203      	str	r2, [sp, #12]
 8000ca2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca4:	695a      	ldr	r2, [r3, #20]
 8000ca6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000caa:	615a      	str	r2, [r3, #20]
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cb2:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, y1_Pin|y2_Pin, GPIO_PIN_RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	210c      	movs	r1, #12
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb8:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, y1_Pin|y2_Pin, GPIO_PIN_RESET);
 8000cba:	f7ff fc17 	bl	80004ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, y3_Pin|y4_Pin, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2106      	movs	r1, #6
 8000cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc6:	f7ff fc11 	bl	80004ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, y5_Pin|y6_Pin|y7_Pin|y8_Pin 
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f24b 0107 	movw	r1, #45063	; 0xb007
 8000cd0:	483e      	ldr	r0, [pc, #248]	; (8000dcc <main+0x180>)

  /*Configure GPIO pins : x3_Pin x2_Pin x1_Pin x4_Pin 
                           x5_Pin x14_Pin x13_Pin x12_Pin */
  GPIO_InitStruct.Pin = x3_Pin|x2_Pin|x1_Pin|x4_Pin 
                          |x5_Pin|x14_Pin|x13_Pin|x12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd2:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOB, y5_Pin|y6_Pin|y7_Pin|y8_Pin 
 8000cd4:	f7ff fc0a 	bl	80004ec <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = x3_Pin|x2_Pin|x1_Pin|x4_Pin 
 8000cd8:	f643 4333 	movw	r3, #15411	; 0x3c33
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cdc:	a905      	add	r1, sp, #20
 8000cde:	483a      	ldr	r0, [pc, #232]	; (8000dc8 <main+0x17c>)
  GPIO_InitStruct.Pin = x3_Pin|x2_Pin|x1_Pin|x4_Pin 
 8000ce0:	9305      	str	r3, [sp, #20]

  /*Configure GPIO pins : y1_Pin y2_Pin */
  GPIO_InitStruct.Pin = y1_Pin|y2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce2:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce8:	f7ff fb2a 	bl	8000340 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = y1_Pin|y2_Pin;
 8000cec:	230c      	movs	r3, #12
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cee:	a905      	add	r1, sp, #20
 8000cf0:	4835      	ldr	r0, [pc, #212]	; (8000dc8 <main+0x17c>)
  GPIO_InitStruct.Pin = y1_Pin|y2_Pin;
 8000cf2:	9305      	str	r3, [sp, #20]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2602      	movs	r6, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfa:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfc:	f7ff fb20 	bl	8000340 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d00:	a905      	add	r1, sp, #20
 8000d02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d0a:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d0e:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d10:	f7ff fb16 	bl	8000340 <HAL_GPIO_Init>

  /*Configure GPIO pins : y3_Pin y4_Pin */
  GPIO_InitStruct.Pin = y3_Pin|y4_Pin;
 8000d14:	2306      	movs	r3, #6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	a905      	add	r1, sp, #20
 8000d18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = y3_Pin|y4_Pin;
 8000d1c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d22:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d24:	f7ff fb0c 	bl	8000340 <HAL_GPIO_Init>

  /*Configure GPIO pins : y5_Pin y6_Pin y7_Pin y8_Pin 
                           y9_Pin y10_Pin */
  GPIO_InitStruct.Pin = y5_Pin|y6_Pin|y7_Pin|y8_Pin 
 8000d28:	f24b 0307 	movw	r3, #45063	; 0xb007
                          |y9_Pin|y10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2c:	a905      	add	r1, sp, #20
 8000d2e:	4827      	ldr	r0, [pc, #156]	; (8000dcc <main+0x180>)
  GPIO_InitStruct.Pin = y5_Pin|y6_Pin|y7_Pin|y8_Pin 
 8000d30:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	9408      	str	r4, [sp, #32]
  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8000d36:	2704      	movs	r7, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d38:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3a:	f7ff fb01 	bl	8000340 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d3e:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d42:	a905      	add	r1, sp, #20
 8000d44:	4820      	ldr	r0, [pc, #128]	; (8000dc8 <main+0x17c>)
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d46:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8000d4e:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d50:	f7ff faf6 	bl	8000340 <HAL_GPIO_Init>

  /*Configure GPIO pin : x11_Pin */
  GPIO_InitStruct.Pin = x11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(x11_GPIO_Port, &GPIO_InitStruct);
 8000d54:	a905      	add	r1, sp, #20
 8000d56:	481e      	ldr	r0, [pc, #120]	; (8000dd0 <main+0x184>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d58:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pin = x11_Pin;
 8000d5c:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(x11_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	f7ff faef 	bl	8000340 <HAL_GPIO_Init>

  /*Configure GPIO pins : x10_Pin x9_Pin x8_Pin x7_Pin 
                           x6_Pin */
  GPIO_InitStruct.Pin = x10_Pin|x9_Pin|x8_Pin|x7_Pin 
 8000d62:	f44f 7372 	mov.w	r3, #968	; 0x3c8
                          |x6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d66:	a905      	add	r1, sp, #20
 8000d68:	4818      	ldr	r0, [pc, #96]	; (8000dcc <main+0x180>)
  GPIO_InitStruct.Pin = x10_Pin|x9_Pin|x8_Pin|x7_Pin 
 8000d6a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d70:	f7ff fae6 	bl	8000340 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d74:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d76:	a905      	add	r1, sp, #20
 8000d78:	4814      	ldr	r0, [pc, #80]	; (8000dcc <main+0x180>)
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d7a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8000d82:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d84:	f7ff fadc 	bl	8000340 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d88:	2320      	movs	r3, #32
 8000d8a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8000d8e:	230a      	movs	r3, #10
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d90:	480e      	ldr	r0, [pc, #56]	; (8000dcc <main+0x180>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8000d98:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9a:	f7ff fad1 	bl	8000340 <HAL_GPIO_Init>
	  if(HAL_GPIO_ReadPin(x7_GPIO_Port, x7_Pin)){
 8000d9e:	4c0b      	ldr	r4, [pc, #44]	; (8000dcc <main+0x180>)
 8000da0:	480a      	ldr	r0, [pc, #40]	; (8000dcc <main+0x180>)
 8000da2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000da6:	f7ff fb9b 	bl	80004e0 <HAL_GPIO_ReadPin>
 8000daa:	4602      	mov	r2, r0
 8000dac:	b100      	cbz	r0, 8000db0 <main+0x164>
  HAL_GPIO_WritePin(y5_GPIO_Port, y5_Pin, GPIO_PIN_SET);}
 8000dae:	2201      	movs	r2, #1
  HAL_GPIO_WritePin(y5_GPIO_Port, y5_Pin, GPIO_PIN_RESET);}
 8000db0:	4620      	mov	r0, r4
 8000db2:	2101      	movs	r1, #1
 8000db4:	f7ff fb9a 	bl	80004ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(y6_GPIO_Port, y6_Pin, GPIO_PIN_SET);
 8000db8:	2201      	movs	r2, #1
 8000dba:	2102      	movs	r1, #2
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	f7ff fb95 	bl	80004ec <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(x7_GPIO_Port, x7_Pin)){
 8000dc2:	e7ed      	b.n	8000da0 <main+0x154>
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	48000800 	.word	0x48000800
 8000dcc:	48000400 	.word	0x48000400
 8000dd0:	48000c00 	.word	0x48000c00

08000dd4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd4:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <HAL_MspInit+0x78>)
{
 8000dd6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd8:	699a      	ldr	r2, [r3, #24]
 8000dda:	f042 0201 	orr.w	r2, r2, #1
 8000dde:	619a      	str	r2, [r3, #24]
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de8:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dea:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dec:	f7ff fa3a 	bl	8000264 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000df0:	2200      	movs	r2, #0
 8000df2:	4611      	mov	r1, r2
 8000df4:	f06f 000b 	mvn.w	r0, #11
 8000df8:	f7ff fa46 	bl	8000288 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	4611      	mov	r1, r2
 8000e00:	f06f 000a 	mvn.w	r0, #10
 8000e04:	f7ff fa40 	bl	8000288 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	f06f 0009 	mvn.w	r0, #9
 8000e10:	f7ff fa3a 	bl	8000288 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000e14:	2200      	movs	r2, #0
 8000e16:	4611      	mov	r1, r2
 8000e18:	f06f 0004 	mvn.w	r0, #4
 8000e1c:	f7ff fa34 	bl	8000288 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	4611      	mov	r1, r2
 8000e24:	f06f 0003 	mvn.w	r0, #3
 8000e28:	f7ff fa2e 	bl	8000288 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	4611      	mov	r1, r2
 8000e30:	f06f 0001 	mvn.w	r0, #1
 8000e34:	f7ff fa28 	bl	8000288 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e40:	f7ff fa22 	bl	8000288 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e44:	b003      	add	sp, #12
 8000e46:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e4a:	bf00      	nop
 8000e4c:	40021000 	.word	0x40021000

08000e50 <NMI_Handler>:
 8000e50:	4770      	bx	lr

08000e52 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000e52:	e7fe      	b.n	8000e52 <HardFault_Handler>

08000e54 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000e54:	e7fe      	b.n	8000e54 <MemManage_Handler>

08000e56 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000e56:	e7fe      	b.n	8000e56 <BusFault_Handler>

08000e58 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000e58:	e7fe      	b.n	8000e58 <UsageFault_Handler>

08000e5a <SVC_Handler>:
 8000e5a:	4770      	bx	lr

08000e5c <DebugMon_Handler>:
 8000e5c:	4770      	bx	lr

08000e5e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8000e5e:	4770      	bx	lr

08000e60 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000e60:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e62:	f7ff f9ed 	bl	8000240 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8000e6a:	f7ff ba64 	b.w	8000336 <HAL_SYSTICK_IRQHandler>
	...

08000e70 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e70:	4915      	ldr	r1, [pc, #84]	; (8000ec8 <SystemInit+0x58>)
 8000e72:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000e76:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000e7e:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <SystemInit+0x5c>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	f042 0201 	orr.w	r2, r2, #1
 8000e86:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8000e88:	6858      	ldr	r0, [r3, #4]
 8000e8a:	4a11      	ldr	r2, [pc, #68]	; (8000ed0 <SystemInit+0x60>)
 8000e8c:	4002      	ands	r2, r0
 8000e8e:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000e96:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e9a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000ea2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000ea4:	685a      	ldr	r2, [r3, #4]
 8000ea6:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000eaa:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8000eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000eae:	f022 020f 	bic.w	r2, r2, #15
 8000eb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8000eb4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000eb6:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <SystemInit+0x64>)
 8000eb8:	4002      	ands	r2, r0
 8000eba:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ec0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ec4:	608b      	str	r3, [r1, #8]
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	f87fc00c 	.word	0xf87fc00c
 8000ed4:	ff00fccc 	.word	0xff00fccc

08000ed8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ed8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f10 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000edc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ede:	e003      	b.n	8000ee8 <LoopCopyDataInit>

08000ee0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000ee2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ee4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ee6:	3104      	adds	r1, #4

08000ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ee8:	480b      	ldr	r0, [pc, #44]	; (8000f18 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000eea:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000eec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000eee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ef0:	d3f6      	bcc.n	8000ee0 <CopyDataInit>
	ldr	r2, =_sbss
 8000ef2:	4a0b      	ldr	r2, [pc, #44]	; (8000f20 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ef4:	e002      	b.n	8000efc <LoopFillZerobss>

08000ef6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ef6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ef8:	f842 3b04 	str.w	r3, [r2], #4

08000efc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000efc:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <LoopForever+0x16>)
	cmp	r2, r3
 8000efe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f00:	d3f9      	bcc.n	8000ef6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f02:	f7ff ffb5 	bl	8000e70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f06:	f000 f811 	bl	8000f2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f0a:	f7ff fe9f 	bl	8000c4c <main>

08000f0e <LoopForever>:

LoopForever:
    b LoopForever
 8000f0e:	e7fe      	b.n	8000f0e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f10:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000f14:	08000fc4 	.word	0x08000fc4
	ldr	r0, =_sdata
 8000f18:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f1c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000f20:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000f24:	2000002c 	.word	0x2000002c

08000f28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f28:	e7fe      	b.n	8000f28 <ADC1_2_IRQHandler>
	...

08000f2c <__libc_init_array>:
 8000f2c:	b570      	push	{r4, r5, r6, lr}
 8000f2e:	4e0d      	ldr	r6, [pc, #52]	; (8000f64 <__libc_init_array+0x38>)
 8000f30:	4c0d      	ldr	r4, [pc, #52]	; (8000f68 <__libc_init_array+0x3c>)
 8000f32:	1ba4      	subs	r4, r4, r6
 8000f34:	10a4      	asrs	r4, r4, #2
 8000f36:	2500      	movs	r5, #0
 8000f38:	42a5      	cmp	r5, r4
 8000f3a:	d109      	bne.n	8000f50 <__libc_init_array+0x24>
 8000f3c:	4e0b      	ldr	r6, [pc, #44]	; (8000f6c <__libc_init_array+0x40>)
 8000f3e:	4c0c      	ldr	r4, [pc, #48]	; (8000f70 <__libc_init_array+0x44>)
 8000f40:	f000 f818 	bl	8000f74 <_init>
 8000f44:	1ba4      	subs	r4, r4, r6
 8000f46:	10a4      	asrs	r4, r4, #2
 8000f48:	2500      	movs	r5, #0
 8000f4a:	42a5      	cmp	r5, r4
 8000f4c:	d105      	bne.n	8000f5a <__libc_init_array+0x2e>
 8000f4e:	bd70      	pop	{r4, r5, r6, pc}
 8000f50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f54:	4798      	blx	r3
 8000f56:	3501      	adds	r5, #1
 8000f58:	e7ee      	b.n	8000f38 <__libc_init_array+0xc>
 8000f5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f5e:	4798      	blx	r3
 8000f60:	3501      	adds	r5, #1
 8000f62:	e7f2      	b.n	8000f4a <__libc_init_array+0x1e>
 8000f64:	08000fbc 	.word	0x08000fbc
 8000f68:	08000fbc 	.word	0x08000fbc
 8000f6c:	08000fbc 	.word	0x08000fbc
 8000f70:	08000fc0 	.word	0x08000fc0

08000f74 <_init>:
 8000f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f76:	bf00      	nop
 8000f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f7a:	bc08      	pop	{r3}
 8000f7c:	469e      	mov	lr, r3
 8000f7e:	4770      	bx	lr

08000f80 <_fini>:
 8000f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f82:	bf00      	nop
 8000f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f86:	bc08      	pop	{r3}
 8000f88:	469e      	mov	lr, r3
 8000f8a:	4770      	bx	lr
